mse version: 2.1.2
game: magic
short name: M15 CS Class
full name: Classicshifted Class
icon: card-sample.png
position hint: 280

version: 2024-08-01
depends on:
	package: magic.mse-game
	version: 2014-06-25
depends on:
	package: magic-modules.mse-include
	version: 2024-05-20
depends on:
	package: magic-m15-classicshifted-shared.mse-include
	version: 2024-08-01
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2007-09-23

card width: 750
card height: 1046
card dpi: 300

### blanks by iDerp, tweaks by GenevensiS
### code by GenevensiS

############################################################## Extra scripts
init script:
	card_shape := { "class" }
	
	nameline_offset_top_1 := { if is_crowned() then -7 else -16 }
	casting_cost_offset_top_1 := { 1 }
	transform_symbol_offset_left_1 := { 18 }
	transform_symbol_offset_top_1 := { 14 }
	transform_symbol_offset_width_1 := { -28 }
	transform_symbol_offset_height_1 := { -28 }
	name_transform_symbol_offset_left_1 := { -18 }
	card_symbol_offset_left_1 := { -12 }
	card_symbol_offset_top_1 := { 5 }
	card_symbol_offset_width_1 := { -6 }
	card_symbol_offset_height_1 := { -6 }
	name_card_symbol_offset_left_1 := { 12 }
	
	transform_symbol_disabled_2 := { true }
	card_symbol_disabled_2 := { true }
	nameline_offset_top_2 := { -8 }
	nameline_offset_height_2 := { 16 }
	nameline_offset_left_2 := { -32 }
	nameline_offset_width_2 := { 36 }
	
	typeline_offset_top_1 := { 299 }
	typeline_offset_left_1 := { -2 }
	rarity_offset_left_1 := { 4 }
	rarity_offset_top_1 := { 2 }
	
	typeline_offset_top_2 := { -128 }
	typeline_offset_height_2 := { 16 }
	typeline_offset_left_2 := { -30 }
	typeline_offset_width_2 := { 46 }
	rarity_disabled_2 := { true }
	
	card_stamp_offset_top_1 := { -2 }
	card_stamp_offset_height_1 := { 12 }
	card_stamp_offset_left_1 := { -6 }
	card_stamp_offset_width_1 := { 12 }
	
	swap_fonts_pt_default :=
	[
		name: {"Beleren Bold"},
		size: {30.0},
		color: {"white"},
		vertical: {0},
		italic: {"Beleren Bold"}
	]
	swap_fonts_body_default :=
	[
		name: {"MPlantin"},
		size: {24.0},
		color: {"black"},
		vertical: {0},
		italic: {"MPlantin-Italic"}
	]
	swap_fonts_type_default :=
	[
		name: {"Beleren Bold"},
		size: {26.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	swap_fonts_name_default :=
	[
		name: {"Beleren Bold"},
		size: {28.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	
	template_prefix :=
	[
		card:			{ if is_crowned() then "crown/" else "card/" }
		transform:		{ "transform/" }
		pt:				{ "/magic-m15-classicshifted-shared.mse-include/pt_saga/" }
		identity:		{ "/magic-modules.mse-include/indicators/" }
		crown:			{ "crown/" }
	]
	template_suffix :=
	[
		card:			"card.png"
		transform:		"card.png"
		pt:				"pt.png"
		identity:		"identity.png"
		crown:			"card.png"
	]
	template :=			{ template_prefix[type]() + input + template_suffix[type] }
	land_template :=	{ template_prefix[type]() + (if input == "a" then "c" else input) + "l" + template_suffix[type] }
	
	card_transform :=	{ color_background(type:"transform",	base_hybrid:card_hybrid) }
	card_crown :=		{ color_background(type:"crown",		base_hybrid:card_hybrid) }
	card_ptbox :=		{ color_background(type:"pt",			base_hybrid:card_hybrid) }
	
	is_clear :=
	{
		styling.clear_frame == "yes" or
		(
			styling.clear_frame == "if colorless" and
			not lang_setting("is_artifact")(card.super_type) and
			not lang_setting("is_land")(card.super_type) and
			not contains(card.card_color, match: "white") and
			not contains(card.card_color, match: "blue") and
			not contains(card.card_color, match: "black") and
			not contains(card.card_color, match: "red") and
			not contains(card.card_color, match: "green") and
			not contains(card.card_color, match: "land") and
			not contains(card.card_color, match: "artifact") and
			not contains(card.card_color, match: "multicolor")
		)
	}
	is_crowned := { styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and lang_setting("is_legendary")(card.super_type)) }
	is_nyx := { styling.nyx_frame == "yes" or (styling.nyx_frame == "if enchantment" and lang_setting("is_nyx")(card.super_type)) }
	is_vehicle := { styling.vehicle_frame == "yes" or (styling.vehicle_frame == "if vehicle" and lang_setting("is_vehicle")(card.sub_type)) }
	is_miracle := { styling.miracle_frame == "yes" or (styling.miracle_frame == "if miracle" and lang_setting("is_miracle")(card.text)) }
	is_notched := { styling.transformation_reminder }
	has_identity := { styling.color_indicator_dot }
	has_identity_2 := { false }
	has_identity_3 := { false }
	
	chop_top :=			{ split := split_comma(styling.chop_text_box); if length(split) > 0 and split.0 != "" then clamp(split.0, maximum: 500, minimum: -500) else 0 }
	chop_bot :=			{ split := split_comma(styling.chop_text_box); if length(split) > 1 and split.1 != "" then clamp(split.1, maximum: 500, minimum: -500) else 0 }
	
	popout_left :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.0 != "" and split.0 != "-" then clamp(split.0, maximum:1500, minimum:-500) else 0 }
	popout_top :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.1 != "" and split.1 != "-" then clamp(split.1, maximum:2000, minimum:-500) else 0 }
	popout_width :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.2 != "" and split.2 != "-" then clamp(split.2, maximum:1500, minimum:0) else 0 }
	popout_height :=	{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.3 != "" and split.3 != "-" then clamp(split.3, maximum:2000, minimum:0) else 0 }
	
	
	text_left :=			{ 382 }
	text_top :=				{ 274 }
	text_width :=			{ 304 }
	text_height :=			{ 710 }
	
	level_cost_left :=		{ 382 }
	level_left :=			{ 534 }
	level_width :=			{ 152 }
	level_font_size :=		{ 22 }
	
	separator_lefts :=
	[
		"flavor bar":		375
		"grey bar":			375
		"none":				375
		"level":			375
		"level notchless":	375
	]
	separator_widths :=
	[
		"flavor bar":		316
		"grey bar":			316
		"none":				372
		"level":			372
		"level notchless":	372
	]
	separator_heights :=
	[
		"flavor bar":		24
		"grey bar":			24
		"none":				24
		"level":			49
		"level notchless":	49
	]
	separator_paddings :=
	[
		"flavor bar":		10
		"grey bar":			6
		"none":				0
		"level":			52
		"level notchless":	52
	]
	
	separator_left :=		{ separator_lefts[separator_field(input)] }
	separator_width :=		{ separator_widths[separator_field(input)] }
	separator_height :=		{ clamp(separator_heights[separator_field(input)] - separator_shrink(), minimum: 5, maximum: 200) }
	separator_top :=
	{
		if length(card_style.text.layout.separators) or else 0 > input-1
		then card_style.text.top + card_style.text.layout.separators[input-1] - separator_height(input)/2 + separator_move(input)
		else styling.card_height+1
	}
	separator_padding :=	{ separator_paddings[separator_field(input)] }
	separator_shrink :=
	{
		count := abilities_count()
		(if count == 5 then 4 else if count == 6 then 7 else if count == 7 then 9 else 0) +
		(if styling.shrink_separators != "" and styling.shrink_separators != "-" then to_number(styling.shrink_separators) else 0)
	}
	
	separator_move :=			{ split := split_comma(styling.move_separators); if length(split) > input-1 and split[input-1] != "" and split[input-1] != "-" then clamp(split[input-1], maximum:500, minimum:-500) else 0 }
	
	separator_enable_level :=	{ true }
	separator_default :=		{ styling.default_separators }
	separator_image :=			{ "/magic-modules.mse-include/separators" + separator_field(input) + ".png" }
	
	abilities_count :=	{ to_int(styling.number_of_textboxes) }
	
	alt_text := { true }
	alt_text_script :=
	{
		count := abilities_count()
		if count == 1 then
			forward_editor(field: card.level_1_text)
		else if count == 2 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text)
		else if count == 3 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text)
		else if count == 4 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text)
		else if count == 5 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text)
		else if count == 6 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text)
		else
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text, separator6: "<line>\n</line>", field7: card.level_7_text)
	}
	
	text_filter := text_filter + { if input == "" then "​" else input }		# There is a zero width space in the second ""
	
	level_filter_default := { "Level" }
	
	text_alignment :=
	{
		if	(			styling.center_rule_text == "short text only"
				and not	contains(match:"\n", card.rule_text)
				and		card.flavor_text == "<i-flavor></i-flavor>"
				and		card_style.text.content_lines <= 2
			)
			or	styling.center_rule_text == "always"
		then "middle center"
		else "middle left"
	}

############################################################## Extra style options
styling field:
	type:			text
	name:			popout art coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch art to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no

include file: /magic-modules.mse-include/texts/styling_fields

styling field:
	type:			choice
	name:			number of textboxes
	description:	Number of textboxes for abilities and passives. MODIFY CONTENT OF TEXTBOXES IF THIS HAS TROUBLE UPDATING AFTER BEING CHANGED.
	choice:			1
	choice:			2
	choice:			3
	choice:			4
	choice:			5
	choice:			6
	choice:			7
	initial:		3
styling field:
	type:			choice
	name:			default separators
	description:	Is the card a class or a case? Separators can be changed individually on the card tab.
	include file:	/magic-modules.mse-include/separators/choices
	inital:			level
styling field:
	type:			text
	name:			move separators
	description:	Moves the level separators down by this many pixels. Use negatives to move up. Formatted as "1,2,3,4,5,6"
styling field:
	type:			text
	name:			shrink separators
	description:	Reduce the height of the level separators by this many pixels.
styling field:
	type:			boolean
	name:			transformation reminder
	description:	Add a transformation notch and p/t
	initial:		no
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary
styling field:
	type:			choice
	name:			clear frame
	description:	Use a see-through frame?
	choice:			yes
	choice:			if colorless
	choice:			no
	initial:		if colorless
styling field:
	type:			choice
	name:			vehicle frame
	description:	Use the vehicle frame overlay?
	choice:			yes
	choice:			if vehicle
	choice:			no
	initial:		if vehicle
styling field:
	type:			choice
	name:			nyx frame
	description:	Use the nyx frame overlay?
	choice:			yes
	choice:			if enchantment
	choice:			no
	initial:		if enchantment
styling field:
	type:			choice
	name:			miracle frame
	description:	Use the miracle frame overlay?
	choice:			yes
	choice:			if miracle
	choice:			no
	initial:		if miracle

include file: /magic-modules.mse-include/rarities/styling_fields

include file: /magic-modules.mse-include/indicators/styling_fields

include file: /magic-modules.mse-include/watermarks/styling_fields

styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false

include file: /magic-modules.mse-include/information/styling_fields

include file: /magic-modules.mse-include/symbol-fonts/styling_fields

include file: /magic-modules.mse-include/fonts/styling_fields

############################################################## Card fields

include file: /magic-modules.mse-include/information/card_fields

include file: /magic-modules.mse-include/stamps/card_fields

include file: /magic-modules.mse-include/corners/card_fields

include file: /magic-modules.mse-include/watermarks/card_fields

include file: /magic-modules.mse-include/separators/card_fields

include file: /magic-modules.mse-include/namelines/card_fields

include file: /magic-modules.mse-include/typelines/card_fields

card style:
	############################# Background stuff
	card color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			1
		popup style:		in place
		render style:		image
		image:				{ if is_clear() then "" else card_background() }
		mask:				masks/card_mask.png
	
	############################# Image
	image:
		left:				{ if styling.stretch_art_to_whole_card then 0						else if is_crowned() and is_clear() then 11		else if is_clear() then 29									else 375 }
		top:				{ if styling.stretch_art_to_whole_card then 0						else if is_crowned() and is_clear() then 15		else if is_clear() then 30	else if is_crowned() then 105	else 98 }
		right:				{ if styling.stretch_art_to_whole_card then stylesheet.card_width	else if is_crowned() and is_clear() then 739	else if is_clear() then 721									else 690 }
		bottom:				{ if styling.stretch_art_to_whole_card then stylesheet.card_height	else if is_crowned() and is_clear() then 971	else if is_clear() then 971									else 882 }
		z index:			0
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			1000
	
	############################# Text box
	text:
		left:				{ text_left() }
		top:				{ text_top() + chop_top() }
		width:				{ text_width() }
		height:				{ text_height() - chop_top() - chop_bottom() + body_font_vertical() }
		z index:			900
		alignment:			{ text_alignment() }
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			scale down to:		7
		line height hard:	{ if is_modal(card.chapter_text) then 0.9 else 1.2 }
		line height line:	{ clamp((if styling.separator_type == "line (Case)" then 35 else 49) - separator_shrink()/2, minimum: 5, maximum: 100) * 0.055 }
		line height soft:	0.9
	level 9 text:
		left:				{ level_cost_left() }
		width:				{ if styling.separator_type == "line (Case)" or abilities_count() <= 1 then 0 else level_width() }
		top:				{ separator_top(1) + 2 }
		height:				{ separator_height(1) - 4 }
		z index:			910
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ level_font_size() }
			scale down to:		5
			weight:				bold
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ level_font_size() }
			scale down to:		5
	level 2:
		left:				{ level_left() }
		width:				{ if styling.separator_type == "line (Case)" or abilities_count() <= 1 then 0 else level_width() }
		top:				{ separator_top(1) + 2 }
		height:				{ separator_height(1) - 4 }
		z index:			910
		alignment:			middle right
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ level_font_size() }
			scale down to:		5
			weight:				bold
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ level_font_size() }
			scale down to:		5
	level 10 text:
		left:				{ level_cost_left() }
		width:				{ if styling.separator_type == "line (Case)" or abilities_count() <= 2 then 0 else level_width() }
		top:				{ separator_top(2) + 2 }
		height:				{ separator_height(2) - 4 }
		z index:			910
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ level_font_size() }
			scale down to:		5
			weight:				bold
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ level_font_size() }
			scale down to:		5
	level 3:
		left:				{ level_left() }
		width:				{ if styling.separator_type == "line (Case)" or abilities_count() <= 2 then 0 else level_width() }
		top:				{ separator_top(2) + 2 }
		height:				{ separator_height(2) - 4 }
		z index:			910
		alignment:			middle right
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ level_font_size() }
			scale down to:		5
			weight:				bold
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ level_font_size() }
			scale down to:		5
	level 11 text:
		left:				{ level_cost_left() }
		width:				{ if styling.separator_type == "line (Case)" or abilities_count() <= 3 then 0 else level_width() }
		top:				{ separator_top(3) + 2 }
		height:				{ separator_height(3) - 4 }
		z index:			910
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ level_font_size() }
			scale down to:		5
			weight:				bold
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ level_font_size() }
			scale down to:		5
	level 4:
		left:				{ level_left() }
		width:				{ if styling.separator_type == "line (Case)" or abilities_count() <= 3 then 0 else level_width() }
		top:				{ separator_top(3) + 2 }
		height:				{ separator_height(3) - 4 }
		z index:			910
		alignment:			middle right
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ level_font_size() }
			scale down to:		5
			weight:				bold
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ level_font_size() }
			scale down to:		5
	level 12 text:
		left:				{ level_cost_left() }
		width:				{ if styling.separator_type == "line (Case)" or abilities_count() <= 4 then 0 else level_width() }
		top:				{ separator_top(4) + 2 }
		height:				{ separator_height(4) - 4 }
		z index:			910
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ level_font_size() }
			scale down to:		5
			weight:				bold
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ level_font_size() }
			scale down to:		5
	level 5:
		left:				{ level_left() }
		width:				{ if styling.separator_type == "line (Case)" or abilities_count() <= 4 then 0 else level_width() }
		top:				{ separator_top(4) + 2 }
		height:				{ separator_height(4) - 4 }
		z index:			910
		alignment:			middle right
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ level_font_size() }
			scale down to:		5
			weight:				bold
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ level_font_size() }
			scale down to:		5
	level 13 text:
		left:				{ level_cost_left() }
		width:				{ if styling.separator_type == "line (Case)" or abilities_count() <= 5 then 0 else level_width() }
		top:				{ separator_top(5) + 2 }
		height:				{ separator_height(5) - 4 }
		z index:			910
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ level_font_size() }
			scale down to:		5
			weight:				bold
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ level_font_size() }
			scale down to:		5
	level 6:
		left:				{ level_left() }
		width:				{ if styling.separator_type == "line (Case)" or abilities_count() <= 5 then 0 else level_width() }
		top:				{ separator_top(5) + 2 }
		height:				{ separator_height(5) - 4 }
		z index:			910
		alignment:			middle right
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ level_font_size() }
			scale down to:		5
			weight:				bold
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ level_font_size() }
			scale down to:		5
	level 14 text:
		left:				{ level_cost_left() }
		width:				{ if styling.separator_type == "line (Case)" or abilities_count() <= 6 then 0 else level_width() }
		top:				{ separator_top(6) + 2 }
		height:				{ separator_height(6) - 4 }
		z index:			910
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ level_font_size() }
			scale down to:		5
			weight:				bold
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ level_font_size() }
			scale down to:		5
	level 7:
		left:				{ level_left() }
		width:				{ if styling.separator_type == "line (Case)" or abilities_count() <= 6 then 0 else level_width() }
		top:				{ separator_top(6) + 2 }
		height:				{ separator_height(6) - 4 }
		z index:			910
		alignment:			middle right
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ level_font_size() }
			scale down to:		5
			weight:				bold
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ level_font_size() }
			scale down to:		5
	rule text 3:
		left:				76
		top:				838
		width:				{ if is_notched() then 100 else 0 }
		height:				30
		z index:			920
		alignment:			left middle
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				23.5
			color:				{ body_font_color() }
	separator 1:
		left:				{ separator_left() }
		top:				{ separator_top(1) }
		width:				{ separator_width() }
		height:				{ separator_height(1) }
		z index:			710
		visible:			{ abilities_count() > 1 }
		render style:		image
		image:				{ separator_image() }
	separator 2:
		left:				{ separator_left() }
		top:				{ separator_top(2) }
		width:				{ separator_width() }
		height:				{ separator_height(2) }
		z index:			710
		visible:			{ abilities_count() > 2 }
		render style:		image
		image:				{ separator_image() }
	separator 3:
		left:				{ separator_left() }
		top:				{ separator_top(3) }
		width:				{ separator_width() }
		height:				{ separator_height(3) }
		z index:			710
		visible:			{ abilities_count() > 3 }
		render style:		image
		image:				{ separator_image() }
	separator 4:
		left:				{ separator_left() }
		top:				{ separator_top(4) }
		width:				{ separator_width() }
		height:				{ separator_height(4) }
		z index:			710
		visible:			{ abilities_count() > 4 }
		render style:		image
		image:				{ separator_image() }
	separator 5:
		left:				{ separator_left() }
		top:				{ separator_top(5) }
		width:				{ separator_width() }
		height:				{ separator_height(5) }
		z index:			710
		visible:			{ abilities_count() > 5 }
		render style:		image
		image:				{ separator_image() }
	separator 6:
		left:				{ separator_left() }
		top:				{ separator_top(6) }
		width:				{ separator_width() }
		height:				{ separator_height(6) }
		z index:			710
		visible:			{ abilities_count() > 6 }
		render style:		image
		image:				{ separator_image() }
	
	############################# PT
	pt:
		left:				589
		top:				{ 826 + pt_font_vertical() }
		width:				95
		height:				60
		z index:			910
		alignment:			center middle shrink-overflow
		font:
			name:				{ pt_font() }
			size:				{ pt_font_size() }
			color:				{ pt_font_color() }
			separator color:	red
			shadow color:			rgb(0,0,0)
			shadow displacement x:	2
			shadow displacement y:	2

############################################################## Extra card fields
extra card field:
	type:				choice
	name:				transform notch
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				pt box
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				color
	name:				stamp border
	editable:			false
	save value:			false
	script:				rgb(0,0,0)
extra card field:
	type:				choice
	name:				miracle overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				nyx overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				vehicle overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				devoid card mask
	editable:			false
	save value:			false
	choice:				devoid card mask
extra card field:
	type:				choice
	name:				devoid frame
	editable:			false
	save value:			false
	choice:				devoid frame
extra card field:
	type:				choice
	name:				devoid frame 2
	editable:			false
	save value:			false
	choice:				devoid frame 2
extra card field:
	type:				choice
	name:				devoid textbox
	editable:			false
	save value:			false
	choice:				devoid textbox
extra card style:
	transform notch:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			3
		visible:			{ is_notched() and not is_clear() }
		render style:		image
		image:				{ card_transform() }
	pt box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			19
		visible:			{ card.pt != "" }
		render style:		image
		image:				{ card_ptbox() }
	stamp border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			19
		visible:			{ is_stamped() }
		mask:				masks/stamp_border_mask.png
	nyx overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			5
		visible:			{ is_nyx() }
		render style:		image
		image:				{ if is_crowned() then set_combine(input: "/magic-m15-classicshifted-shared.mse-include/nyx/nyx_crown.png", combine: "add") else set_combine(input: "/magic-m15-classicshifted-shared.mse-include/nyx/nyx.png", combine: "add") }
	vehicle overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			6
		visible:			{ is_vehicle() }
		render style:		image
		image:				/magic-m15-classicshifted-shared.mse-include/vehicle/vehicle.png
	miracle overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			7
		visible:			{ is_miracle() }
		render style:		image
		image:				{ if is_crowned() then set_alpha(set_combine(input: "/magic-m15-classicshifted-shared.mse-include/miracle/miracle_crown.png", combine: "add"), alpha:0.6) else set_alpha(set_combine(input: "/magic-m15-classicshifted-shared.mse-include/miracle/miracle.png", combine: "add"), alpha:0.6) }
	devoid card mask:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			1
		visible:			{ is_clear() }
		render style:		image
		image:				{ image := "clear_masks" + (if is_crowned() then "/devoid_image_mask_crown.png" else "/devoid_image_mask.png"); set_combine(image, combine: "multiply") }
	devoid frame:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			2
		visible:			{ is_clear() }
		render style:		image
		image:				{ image := "clear_masks" + (if is_crowned() then "/devoid_crown" else "/devoid") + (if is_notched() then "_transform.png" else ".png"); set_combine(image, combine: "multiply") }
		mask:				{ "clear_masks" + (if is_crowned() then "/devoid_mask_crown.png" else "/devoid_mask.png") }
	devoid frame 2:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			3
		visible:			{ is_clear() }
		render style:		image
		image:				{ image := "clear_masks" + (if is_crowned() then "/devoid_screen_crown" else "/devoid_screen") + (if is_notched() then "_transform.png" else ".png"); set_alpha(set_combine(image, combine: "screen"), alpha:0.2) }
		mask:				{ "clear_masks" + (if is_crowned() then "/devoid_mask_crown.png" else "/devoid_mask.png") }
	devoid textbox:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			4
		visible:			{ is_clear() }
		render style:		image
		image:				{ set_alpha(set_combine("clear_masks" + "/devoid_screen" + (if is_notched() then "_transform.png" else ".png"), combine: "screen"), alpha:0.75) }
		mask:				{ "clear_masks" + "/devoid_textbox_mask" + (if is_crowned() then "_crown" else "") + (if is_notched() then "_transform.png" else ".png") }
