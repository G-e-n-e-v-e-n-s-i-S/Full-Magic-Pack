mse version: 2.1.2
game: magic
short name: M15 CS Split
full name: Classicshifted Split
icon: card-sample.png
position hint: 280

version: 2024-08-01
depends on:
	package: magic.mse-game
	version: 2014-06-25
depends on:
	package: magic-modules.mse-include
	version: 2024-05-20
depends on:
	package: magic-m15-classicshifted-99-shared_2976.mse-include
	version: 2024-08-01
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2007-09-23

card width: 4152
card height: 2976
card dpi: 1190
card background: black

### blanks by iDerp, tweaks by GenevensiS
### code by GenevensiS

############################################################## Extra scripts
init script:
	card_shape := { "split" }
	faces_coordinates :=
	{
		[
			[
				left: 0,
				top: 0,
				width: stylesheet.card_width,
				height: stylesheet.card_height
			],
			[
				left: 2196,
				top: 0,
				width: 1867,
				height: 2976
			],
		]
	}
	
	nameline_offset_left_1 := { -89 }
	nameline_offset_width_1 := { -1675 }
	casting_cost_offset_top_1 := { 8 }
	transform_symbol_offset_left_1 := { 40 }
	transform_symbol_offset_top_1 := { 56 }
	transform_symbol_offset_width_1 := { -111 }
	transform_symbol_offset_height_1 := { -111 }
	name_transform_symbol_offset_left_1 := { -72 }
	card_symbol_offset_left_1 := { -48 }
	card_symbol_offset_top_1 := { 20 }
	card_symbol_offset_width_1 := { -24 }
	card_symbol_offset_height_1 := { -24 }
	name_card_symbol_offset_left_1 := { 48 }
	
	nameline_offset_left_2 := { -45 }
	nameline_offset_width_2 := { 80 }
	nameline_offset_height_2 := { 70 }
	casting_cost_offset_top_2 := { 8 }
	transform_symbol_offset_left_2 := { 40 }
	transform_symbol_offset_top_2 := { 56 }
	transform_symbol_offset_width_2 := { -111 }
	transform_symbol_offset_height_2 := { -111 }
	name_transform_symbol_offset_left_2 := { -72 }
	card_symbol_offset_left_2 := { -48 }
	card_symbol_offset_top_2 := { 20 }
	card_symbol_offset_width_2 := { -24 }
	card_symbol_offset_height_2 := { -24 }
	name_card_symbol_offset_left_2 := { 48 }
	
	typeline_offset_left_1 := { if is_unified() then -36 else -84 }
	typeline_offset_top_1 := { 12 }
	typeline_offset_width_1 := { if is_unified() then 111 else -1640 }
	rarity_offset_top_1 := { 8 }
	
	typeline_offset_left_2 := { -51 }
	typeline_offset_top_2 := { if is_unified() then 1300 else 55 }
	typeline_offset_width_2 := { 167 }
	typeline_offset_height_2 := { 73 }
	rarity_offset_top_2 := { 8 }
	rarity_offset_size_2 := { -24 }
	
	card_stamp_offset_top_1 := { -24 }
	card_stamp_offset_height_1 := { 48 }
	card_stamp_offset_left_1 := { -40 }
	card_stamp_offset_width_1 := { 48 }
	
	swap_fonts_pt_default :=
	[
		name: {"Beleren Bold"},
		size: {119.0},
		color: {"white"},
		vertical: {0},
		italic: {"Beleren Bold"}
	]
	swap_fonts_body_default :=
	[
		name: {"MPlantin"},
		size: {95.0},
		color: {"black"},
		vertical: {0},
		italic: {"MPlantin-Italic"}
	]
	swap_fonts_type_default :=
	[
		name: {"Beleren Bold"},
		size: {if is_unified() then 103.0 else 95.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	swap_fonts_name_default :=
	[
		name: {"Beleren Bold"},
		size: {111.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	
	swap_fonts_pt2_default :=
	[
		name: {"Beleren Bold"},
		size: {119.0},
		color: {"white"},
		vertical: {0},
		italic: {"Beleren Bold"}
	]
	swap_fonts_body2_default :=
	[
		name: {"MPlantin"},
		size: {95.0},
		color: {"black"},
		vertical: {0},
		italic: {"MPlantin-Italic"}
	]
	swap_fonts_type2_default :=
	[
		name: {"Beleren Bold"},
		size: {95.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	swap_fonts_name2_default :=
	[
		name: {"Beleren Bold"},
		size: {111.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	
	template_prefix :=
	[
		card:								{ "card_unified/" }
		card_left:							{ "card_left/" }
		card_right:							{ "card_right/" }
		transform_left:						{ "transform_left_unified/" }
		transform_left_nonloyalty:			{ "transform_left_unified_nonloyalty/" }
		transform_right:					{ "transform_right_unified/" }
		transform_right_nonloyalty:			{ "transform_right_unified_nonloyalty/" }
		split_transform_left:				{ "transform_left/" }
		split_transform_left_nonloyalty:	{ "transform_left_nonloyalty/" }
		split_transform_right:				{ "transform_right/" }
		split_transform_right_nonloyalty:	{ "transform_right_nonloyalty/" }
		pt:									{ "pt/" }
		identity:							{ "/magic-modules.mse-include/indicators/" }
		crown:								{ "crown/" }
	]
	template_suffix :=
	[
		card:								"card.png"
		card_left:							"card.png"
		card_right:							"card.png"
		transform_left:						"card.png"
		transform_left_nonloyalty:			"card.png"
		transform_right:					"card.png"
		transform_right_nonloyalty:			"card.png"
		split_transform_left:				"card.png"
		split_transform_left_nonloyalty:	"card.png"
		split_transform_right:				"card.png"
		split_transform_right_nonloyalty:	"card.png"
		pt:									"pt.png"
		identity:							"identity.png"
		crown:								"card.png"
	]
	template :=								{ template_prefix[type]() + input + template_suffix[type] }
	land_template :=						{ template_prefix[type]() + (if input == "a" then "c" else input) + "l" + template_suffix[type] }
	
	card_split :=							{ color_background(type:"card_left",						base_hybrid:card_hybrid) }
	card_split_transform :=					{ color_background(type:"split_transform_left",				base_hybrid:card_hybrid) }
	card_split_transform_nonloyalty :=		{ color_background(type:"split_transform_left_nonloyalty",	base_hybrid:card_hybrid) }
	card_transform :=						{ color_background(type:"transform_left",					base_hybrid:card_hybrid) }
	card_transform_nonloyalty :=			{ color_background(type:"transform_left_nonloyalty",		base_hybrid:card_hybrid) }
	card_crown :=							{ color_background(type:"crown",							base_hybrid:card_hybrid) }
	card_ptbox :=							{ color_background(type:"pt",								base_hybrid:card_hybrid) }
	
	card_split_2 :=							{ color_background(type:"card_right",						base_hybrid:card_hybrid, input: card.card_color_2) }
	card_split_transform_2 :=				{ color_background(type:"split_transform_right",			base_hybrid:card_hybrid, input: card.card_color_2) }
	card_split_transform_nonloyalty_2 :=	{ color_background(type:"split_transform_right_nonloyalty",	base_hybrid:card_hybrid, input: card.card_color_2) }
	card_transform_2 :=						{ color_background(type:"transform_right",					base_hybrid:card_hybrid, input: card.card_color_2) }
	card_transform_nonloyalty_2 :=			{ color_background(type:"transform_right_nonloyalty",		base_hybrid:card_hybrid, input: card.card_color_2) }
	card_crown_2 :=							{ color_background(type:"crown",							base_hybrid:card_hybrid, input: card.card_color_2) }
	card_ptbox_2 :=							{ color_background(type:"pt",								base_hybrid:card_hybrid, input: card.card_color_2) }
	
	card_background :=						{ color_background(type:"card",								base_hybrid:card_hybrid, input: card.card_color + ", " + card.card_color_2) }
	
	is_clear :=
	{
		styling.clear_frame == "yes" or
		(
			styling.clear_frame == "if colorless" and
			not lang_setting("is_artifact")(card.super_type) and
			not lang_setting("is_land")(card.super_type) and
			not contains(card.card_color, match: "white") and
			not contains(card.card_color, match: "blue") and
			not contains(card.card_color, match: "black") and
			not contains(card.card_color, match: "red") and
			not contains(card.card_color, match: "green") and
			not contains(card.card_color, match: "land") and
			not contains(card.card_color, match: "artifact") and
			not contains(card.card_color, match: "multicolor")
		)
	}
	is_unified :=		{ styling.unified }
	is_crowned :=		{ styling.legend_crown == "yes"		or (styling.legend_crown == "if legendary" and lang_setting("is_legendary")(card.super_type)) }
	is_crowned_2 :=		{ styling.legend_crown_2 == "yes"	or (styling.legend_crown_2 == "if legendary" and lang_setting("is_legendary")(card.super_type_2)) }
	is_nyx :=			{ styling.nyx_frame == "yes"		or (styling.nyx_frame == "if enchantment" and lang_setting("is_nyx")(card.super_type)) }
	is_nyx_2 :=			{ styling.nyx_frame_2 == "yes"		or (styling.nyx_frame_2 == "if enchantment" and lang_setting("is_nyx")(card.super_type_2)) }
	is_vehicle :=		{ styling.vehicle_frame == "yes"	or (styling.vehicle_frame == "if vehicle" and lang_setting("is_vehicle")(card.sub_type)) }
	is_vehicle_2 :=		{ styling.vehicle_frame_2 == "yes"	or (styling.vehicle_frame_2 == "if vehicle" and lang_setting("is_vehicle")(card.sub_type_2)) }
	is_miracle :=		{ styling.miracle_frame == "yes"	or (styling.miracle_frame == "if miracle" and lang_setting("is_miracle")(card.text)) }
	is_miracle_2 :=		{ styling.miracle_frame_2 == "yes"	or (styling.miracle_frame_2 == "if miracle" and lang_setting("is_miracle")(card.text_2)) }
	is_notched :=		{ styling.transformation_reminder }
	is_notched_2 :=		{ styling.transformation_reminder_2 }
	has_identity :=		{ styling.color_indicator_dot }
	has_identity_2 :=	{ styling.color_indicator_dot_2 }
	has_identity_3 :=	{ false }
	
	chop_top :=			{ split := split_comma(styling.chop_text_box);		if length(split) > 0 and split.0 != "" then clamp(split.0, maximum: 1500, minimum: -1500) else 0 }
	chop_top_2 :=		{ split := split_comma(styling.chop_text_box_2);	if length(split) > 0 and split.0 != "" then clamp(split.0, maximum: 1500, minimum: -1500) else 0 }
	chop_bot :=			{ split := split_comma(styling.chop_text_box);		if length(split) > 1 and split.1 != "" then clamp(split.1, maximum: 1500, minimum: -1500) else 0 }
	chop_bot_2 :=		{ split := split_comma(styling.chop_text_box_2);	if length(split) > 1 and split.1 != "" then clamp(split.1, maximum: 1500, minimum: -1500) else 0 }
	
	popout_left :=		{ split := split_comma(styling.popout_art_coordinates);		if length(split) > 3 and split.0 != "" and split.0 != "-" then clamp(split.0, maximum:3000, minimum:-500) else 0 }
	popout_left_2 :=	{ split := split_comma(styling.popout_art_coordinates_2);	if length(split) > 3 and split.0 != "" and split.0 != "-" then clamp(split.0, maximum:3000, minimum:-500) else 0 }
	popout_top :=		{ split := split_comma(styling.popout_art_coordinates);		if length(split) > 3 and split.1 != "" and split.1 != "-" then clamp(split.1, maximum:4200, minimum:-500) else 0 }
	popout_top_2 :=		{ split := split_comma(styling.popout_art_coordinates_2);	if length(split) > 3 and split.1 != "" and split.1 != "-" then clamp(split.1, maximum:4200, minimum:-500) else 0 }
	popout_width :=		{ split := split_comma(styling.popout_art_coordinates);		if length(split) > 3 and split.2 != "" and split.2 != "-" then clamp(split.2, maximum:3000, minimum:0) else 0 }
	popout_width_2 :=	{ split := split_comma(styling.popout_art_coordinates_2);	if length(split) > 3 and split.2 != "" and split.2 != "-" then clamp(split.2, maximum:3000, minimum:0) else 0 }
	popout_height :=	{ split := split_comma(styling.popout_art_coordinates);		if length(split) > 3 and split.3 != "" and split.3 != "-" then clamp(split.3, maximum:4200, minimum:0) else 0 }
	popout_height_2 :=	{ split := split_comma(styling.popout_art_coordinates_2);	if length(split) > 3 and split.3 != "" and split.3 != "-" then clamp(split.3, maximum:4200, minimum:0) else 0 }
	
	coordinate_change := { (offset + input * width)/stylesheet.card_width }
	split_card_hybrid :=
	{
		do_linear_blend			:=	linear_blend
		linear_blend			:=	{ do_linear_blend(x1: coordinate_change(x1, offset: offset, width: 1868), x2: coordinate_change(x2, offset: offset, width: 1868), y1: y1, y2: y2) }
		card_hybrid.horizontal[color_count]()
	}
	
	match_colors := match@(match: "[WUBRG]")
	filter_colors :=
	{
		colors := ""
		count := length(input) - 1
		for x from 0 to count do
		(
			char := input[x]
			if match_colors(char) and not contains(colors, match: char) then colors := colors + char
			""
		)
		colors
	} + to_lower
	old_color_combination := color_combination
	color_combination :=
	{
		if is_unified() then
		(
			left := 
			colors := filter_colors(card.casting_cost) + filter_colors(card.casting_cost_2)
			color_count := length(colors)
			if color_count > 7 then (colors := "m"; color_count := 1)
		)
		old_color_combination(colors: colors, color_count: color_count)
	}

############################################################## Extra style options
styling field:
	type:			text
	name:			popout art coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			text
	name:			popout art coordinates 2
	description:	The coordinates for the second popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch art to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no

include file: /magic-modules.mse-include/texts/styling_fields_dfc

styling field:
	type:			boolean
	name:			unified
	description:	What overall shape should the card have?
	initial:		no
styling field:
	type:			boolean
	name:			transformation reminder
	description:	Add a transformation notch and p/t
	initial:		no
styling field:
	type:			boolean
	name:			transformation reminder 2
	description:	Add a transformation notch and p/t
	initial:		no
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary
styling field:
	type:			choice
	name:			legend crown 2
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary
styling field:
	type:			choice
	name:			clear frame
	description:	Use a see-through frame?
	choice:			yes
	choice:			if colorless
	choice:			no
	initial:		if colorless
styling field:
	type:			choice
	name:			vehicle frame
	description:	Use the vehicle frame overlay?
	choice:			yes
	choice:			if vehicle
	choice:			no
	initial:		if vehicle
styling field:
	type:			choice
	name:			vehicle frame 2
	description:	Use the vehicle frame overlay?
	choice:			yes
	choice:			if vehicle
	choice:			no
	initial:		if vehicle
styling field:
	type:			choice
	name:			nyx frame
	description:	Use the nyx frame overlay?
	choice:			yes
	choice:			if enchantment
	choice:			no
	initial:		if enchantment
styling field:
	type:			choice
	name:			nyx frame 2
	description:	Use the nyx frame overlay?
	choice:			yes
	choice:			if enchantment
	choice:			no
	initial:		if enchantment
styling field:
	type:			choice
	name:			miracle frame
	description:	Use the miracle frame overlay?
	choice:			yes
	choice:			if miracle
	choice:			no
	initial:		if miracle
styling field:
	type:			choice
	name:			miracle frame 2
	description:	Use the miracle frame overlay?
	choice:			yes
	choice:			if miracle
	choice:			no
	initial:		if miracle

include file: /magic-modules.mse-include/rarities/styling_fields

include file: /magic-modules.mse-include/indicators/styling_fields_dfc

include file: /magic-modules.mse-include/watermarks/styling_fields

styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false

include file: /magic-modules.mse-include/information/styling_fields

include file: /magic-modules.mse-include/symbol-fonts/styling_fields

include file: /magic-modules.mse-include/fonts/styling_fields_dfc

############################################################## Card fields

include file: /magic-modules.mse-include/information/card_fields

include file: /magic-modules.mse-include/stamps/card_fields

include file: /magic-modules.mse-include/corners/card_fields

include file: /magic-modules.mse-include/watermarks/card_fields_dfc

include file: /magic-modules.mse-include/separators/card_fields_dfc

include file: /magic-modules.mse-include/namelines/card_fields_dfc

include file: /magic-modules.mse-include/typelines/card_fields_dfc

card style:
	############################# Background stuff
	card color:
		left:				{ if is_unified() then 0						else 328 }
		width:				{ if is_unified() then stylesheet.card_width	else 1868 }
		top:				{ 0 }
		height:				{ stylesheet.card_height }
		z index:			1
		popup style:		in place
		render style:		image
		image:				{ if is_clear() then "" else if is_unified() then card_background() else card_split() }
		mask:				{ if is_unified() then "masks/card_mask.png" else "masks/card_left_mask.png" }
	card color 2:
		left:				{ 2196 }
		width:				{ 1868 }
		top:				{ 0 }
		height:				{ if is_clear() or is_unified() then 0 else stylesheet.card_height }
		z index:			1
		popup style:		in place
		render style:		image
		image:				{ if is_clear() or is_unified() then "" else card_split_2() }
		mask:				masks/card_right_mask.png
	
	############################# Image
	image:
		left:				{ if styling.stretch_art_to_whole_card then 0						else if is_unified() then (if is_clear() and (is_crowned() or is_crowned_2())	then 331	else if is_clear() then 362		else 488)	else if is_clear() and is_crowned()		then 331	else if is_clear() then 362		else 488 }
		top:				{ if styling.stretch_art_to_whole_card then 0						else if is_unified() then (if is_clear() and (is_crowned() or is_crowned_2())	then 40		else if is_clear() then 122		else 391)	else if is_clear() and is_crowned()		then 40		else if is_clear() then 122		else 391 }
		right:				{ if styling.stretch_art_to_whole_card then stylesheet.card_width	else if is_unified() then (if is_clear() and (is_crowned() or is_crowned_2())	then 4060	else if is_clear() then 4030	else 3905)	else if is_clear() and is_crowned()		then 2193	else if is_clear() then 2162	else 2037 }
		bottom:				{ if styling.stretch_art_to_whole_card then stylesheet.card_height	else if is_unified() then (if is_clear() and (is_crowned() or is_crowned_2())	then 2858	else if is_clear() then 2858	else 1702)	else if is_clear() and is_crowned()		then 2858	else if is_clear() then 2858	else 1702 }
		z index:			0
	image 2:
		left:				{ if styling.stretch_art_to_whole_card then 0						else if is_unified() then 0																												else if is_clear() and is_crowned_2()	then 2198	else if is_clear() then 2229	else 2355 }
		top:				{ if styling.stretch_art_to_whole_card then 0						else if is_unified() then 0																												else if is_clear() and is_crowned_2()	then 40		else if is_clear() then 122		else 391 }
		right:				{ if styling.stretch_art_to_whole_card then 0						else if is_unified() then 0																												else if is_clear() and is_crowned_2()	then 4060	else if is_clear() then 4030	else 3905 }
		bottom:				{ if styling.stretch_art_to_whole_card then 0						else if is_unified() then 0																												else if is_clear() and is_crowned_2()	then 2858	else if is_clear() then 2858	else 1702 }
		z index:			0
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			1000
	mainframe image 2:
		left:				{ popout_left_2() }
		top:				{ popout_top_2() }
		width:				{ popout_width_2() }
		height:				{ popout_height_2() }
		z index:			1000
	
	############################# Text box
	text:
		left:				482
		top:				{ 2003 + chop_top() + body_font_vertical() }
		width:				1559
		height:				{ 813 - chop_top() - chop_bot() }
		z index:			900
		line height hard:	{ if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max:	1.6
		alignment:
			script:
				if
				(
					styling.center_text == "short text only" and
					not contains(match:"\n", card.rule_text) and
					to_text(card.flavor_text) == "" and
					card_style.text.content_lines <= 2
				)
				or	styling.center_text == "always"
				then "middle center"
				else "middle left"
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			scale down to:		7
	text 2:
		left:				2350
		top:				{ 2003 + chop_top_2() + body2_font_vertical() }
		width:				1559
		height:				{ 813 - chop_top_2() - chop_bot_2() }
		z index:			900
		line height hard:	{ if is_modal(card.rule_text_2) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.rule_text_2) then 1.0 else 1.3 }
		line height line max:	1.6
		alignment:
			script:
				if
				(
					styling.center_text_2 == "short text only" and
					not contains(match:"\n", card.rule_text_2) and
					to_text(card.flavor_text_2) == "" and
					card_style.text_2.content_lines <= 2
				)
				or	styling.center_text_2 == "always"
				then "middle center"
				else "middle left"
		font:
			name:				{ body2_font() }
			italic name:		{ body2_font_italic() }
			size:				{ body2_font_size() }
			scale down to:		7
			color:				{ body2_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body2_font_size() }
			scale down to:		7
	rule text 3:
		left:				886
		top:				{ 620 + (if card.loyalty == "" then 28 else 0) + body_font_vertical() }
		width:				{ if is_notched() then 100 else 0 }
		height:				30
		z index:			920
		alignment:			right middle
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				23.5
			color:				{ body_font_color() }
	
	############################# PT
	pt:
		left:				1730
		top:				{ 2669 + pt_font_vertical() }
		width:				374
		height:				239
		z index:			910
		alignment:			center middle shrink-overflow
		font:
			name:				{ pt_font() }
			size:				{ pt_font_size() }
			color:				{ pt_font_color() }
			separator color:	red
			shadow color:			rgb(0,0,0)
			shadow displacement x:	6
			shadow displacement y:	6
	pt 2:
		left:				3598
		top:				{ 2669 + pt2_font_vertical() }
		width:				374
		height:				239
		z index:			910
		alignment:			center middle shrink-overflow
		font:
			name:				{ pt2_font() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			separator color:	red
			shadow color:			rgb(0,0,0)
			shadow displacement x:	6
			shadow displacement y:	6

############################################################## Extra card fields
extra card field:
	type:				choice
	name:				transform notch
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				transform notch 2
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				pt box
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				pt box 2
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				color
	name:				stamp border
	editable:			false
	save value:			false
	script:				rgb(0,0,0)
extra card field:
	type:				choice
	name:				crown overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				crown overlay 2
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				miracle overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				miracle overlay 2
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				nyx overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				nyx overlay 2
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				vehicle overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				vehicle overlay 2
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				devoid card mask
	editable:			false
	save value:			false
	choice:				devoid card mask
extra card field:
	type:				choice
	name:				devoid frame
	editable:			false
	save value:			false
	choice:				devoid frame
extra card field:
	type:				choice
	name:				devoid frame 2
	editable:			false
	save value:			false
	choice:				devoid frame 2
extra card field:
	type:				choice
	name:				devoid textbox
	editable:			false
	save value:			false
	choice:				devoid textbox
extra card style:
	stamp border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			19
		visible:			{ is_stamped() }
		mask:				masks/stamp_border_mask.png
	transform notch:
		left:				{ if is_unified() then 0 else 328 }
		width:				{ if is_unified() then stylesheet.card_width else 1868 }
		top:				0
		height:				{ stylesheet.card_height }
		z index:			3
		visible:			{ not is_clear() and is_notched() }
		render style:		image
		image:
			script:
				if is_unified() then	(if card.pt != "" then card_transform()			else card_transform_nonloyalty())
				else					(if card.pt != "" then card_split_transform()	else card_split_transform_nonloyalty())
	transform notch 2:
		left:				{ if is_unified() then 0 else 2196 }
		width:				{ if is_unified() then stylesheet.card_width else 1868 }
		top:				0
		height:				{ stylesheet.card_height }
		z index:			3
		visible:			{ not is_clear() and is_notched_2() }
		render style:		image
		image:
			script:
				if is_unified() then	(if card.pt_2 != "" then card_transform_2()			else card_transform_nonloyalty_2())
				else					(if card.pt_2 != "" then card_split_transform_2()	else card_split_transform_nonloyalty_2())
	pt box:
		left:				328
		width:				1868
		top:				0
		height:				{ stylesheet.card_height }
		z index:			19
		visible:			{ card.pt != "" }
		render style:		image
		image:				{ if is_clear() then "pt/cpt.png" else card_ptbox() }
	pt box 2:
		left:				2196
		width:				1868
		top:				0
		height:				{ stylesheet.card_height }
		z index:			19
		visible:			{ card.pt_2 != "" }
		render style:		image
		image:				{ if is_clear() then "pt/cpt.png" else card_ptbox_2() }
	crown overlay:
		left:				328
		width:				1868
		top:				0
		height:				{ stylesheet.card_height }
		z index:			4
		visible:			{ not is_clear() and is_crowned() }
		render style:		image
		image:				{ card_crown() }
	crown overlay 2:
		left:				2196
		width:				1868
		top:				0
		height:				{ stylesheet.card_height }
		z index:			4
		visible:			{ not is_clear() and ((is_unified() and is_crowned()) or (not is_unified() and is_crowned_2())) }
		render style:		image
		image:				{ card_crown_2() }
	nyx overlay:
		left:				{ if is_unified() then 0 else 328 }
		width:				{ if is_unified() then stylesheet.card_width else 1868 }
		top:				0
		height:				{ stylesheet.card_height }
		z index:			5
		visible:			{ is_nyx() }
		render style:		image
		image:				{ image := "/magic-m15-classicshifted-99-shared_2976.mse-include/nyx/nyx" + (if is_crowned() then "_crown" else "") + "_split" + (if is_unified() then "_unified" else "") + ".png"; set_combine(image, combine: "add") }
	nyx overlay 2:
		left:				2196
		width:				1868
		top:				0
		height:				{ stylesheet.card_height }
		z index:			5
		visible:			{ not is_unified() and is_nyx_2() }
		render style:		image
		image:				{ image := "/magic-m15-classicshifted-99-shared_2976.mse-include/nyx/nyx" + (if is_crowned() then "_crown" else "") + "_split.png"; set_combine(image, combine: "add") }
	vehicle overlay:
		left:				{ if is_unified() then 0 else 328 }
		width:				{ if is_unified() then stylesheet.card_width else 1868 }
		top:				0
		height:				{ stylesheet.card_height }
		z index:			6
		visible:			{ is_vehicle() }
		render style:		image
		image:				{ "/magic-m15-classicshifted-99-shared_2976.mse-include/vehicle/vehicle" + (if is_unified() then "_battle" else "_split") + ".png" }
	vehicle overlay 2:
		left:				2196
		width:				1868
		top:				0
		height:				{ stylesheet.card_height }
		z index:			6
		visible:			{ not is_unified() and is_vehicle_2() }
		render style:		image
		image:				/magic-m15-classicshifted-99-shared_2976.mse-include/vehicle/vehicle_split.png
	miracle overlay:
		left:				{ if is_unified() then 0 else 328 }
		width:				{ if is_unified() then stylesheet.card_width else 1868 }
		top:				0
		height:				{ stylesheet.card_height }
		z index:			7
		visible:			{ is_miracle() }
		render style:		image
		image:				{ image := "/magic-m15-classicshifted-99-shared_2976.mse-include/miracle/miracle" + (if is_crowned() then "_crown" else "") + "_split" + (if is_unified() then "_unified" else "") + ".png"; set_alpha(set_combine(image, combine: "add"), alpha:0.6) }
	miracle overlay 2:
		left:				2196
		width:				1868
		top:				0
		height:				{ stylesheet.card_height }
		z index:			7
		visible:			{ not is_unified() and is_miracle_2() }
		render style:		image
		image:				{ image := "/magic-m15-classicshifted-99-shared_2976.mse-include/miracle/miracle" + (if is_crowned() then "_crown" else "") + "_split.png"; set_alpha(set_combine(image, combine: "add"), alpha:0.6) }
	devoid card mask:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			1
		visible:			{ is_clear() }
		render style:		image
		image:				{ image := "clear_masks" + "/devoid_image_mask"  + (if is_crowned() then "_crown" else "") + (if is_notched() then (if card.loyalty == "" then "_transform_nonloyalty.png" else "_transform.png") else ".png"); set_combine(image, combine: "multiply") }
	devoid frame:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			2
		visible:			{ is_clear() }
		render style:		image
		image:				{ image := "clear_masks" + (if is_crowned() then "/devoid_crown" else "/devoid") + (if is_notched() then (if card.loyalty == "" then "_transform_nonloyalty.png" else "_transform.png") else ".png"); set_combine(image, combine: "multiply") }
		mask:				{ "clear_masks" + "/devoid_mask"  + (if is_crowned() then "_crown" else "") + (if is_notched() then (if card.loyalty == "" then "_transform_nonloyalty.png" else "_transform.png") else ".png") }
	devoid frame 2:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			3
		visible:			{ is_clear() }
		render style:		image
		image:				{ image := "clear_masks" + (if is_crowned() then "/devoid_screen_crown" else "/devoid_screen") + (if is_notched() then (if card.loyalty == "" then "_transform_nonloyalty.png" else "_transform.png") else ".png"); set_alpha(set_combine(image, combine: "screen"), alpha:0.2) }
		mask:				{ "clear_masks" + "/devoid_mask"  + (if is_crowned() then "_crown" else "") + (if is_notched() then (if card.loyalty == "" then "_transform_nonloyalty.png" else "_transform.png") else ".png") }
	devoid textbox:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			4
		visible:			{ is_clear() }
		render style:		image
		image:				{ set_alpha(set_combine("clear_masks" + "/devoid_screen" + (if is_notched() then (if card.loyalty == "" then "_transform_nonloyalty.png" else "_transform.png") else ".png"), combine: "screen"), alpha:0.75) }
		mask:				{ "clear_masks" + "/devoid_textbox_mask" + (if is_notched() then (if card.loyalty == "" then "_transform_nonloyalty.png" else "_transform.png") else ".png") }
