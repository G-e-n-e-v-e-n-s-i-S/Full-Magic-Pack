mse version:		2.1.2
game:				magic
short name:			UB Class/Case
full name:			Universes Beyond
icon:				card_sample.png
position hint:		095

version:			2021-02-16
depends on:
	package:			magic.mse-game
	version:			2014-06-25
depends on:
	package:			magic-modules.mse-include
	version:			2024-05-20
depends on:
	package:			magic-mana-large.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mana-small.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mainframe-extras.mse-include
	version:			2007-09-23

card width:			750
card height:		1046
card dpi:			300


### blanks by Card Conjurer, Velvet Byrne, Rachel (the Touhou brainrot one), Fungustober and GenevensiS
### code by GenevensiS


############################################################## Extra scripts

init script:
	card_shape := { "class" }
	
	typeline_offset_top_1 := { 295 }
	rarity_offset_top_1 := { 1 }
	
	swap_fonts_pt_default :=
	[
		name: {"Beleren Bold"},
		size: {30.0},
		color: { if is_vehicle() then "white" else "black" },
		vertical: {0},
		italic: {"Beleren Bold"}
	]
	
	swap_fonts_pt2_src := { styling.custom_level_font or else "" }
	swap_fonts_pt2_default :=
	[
		name: {"Beleren Bold"},
		size: {level_font_size()},
		color: {"black"},
		vertical: {0},
		italic: {"Beleren Bold"}
	]
	
	swap_fonts_body_default :=
	[
		name: {"MPlantin"},
		size: {24.0},
		color: {"black"},
		vertical: {0},
		italic: {"MPlantin-Italic"}
	]
	
	swap_fonts_type_default :=
	[
		name: {"Beleren Bold"},
		size: {26.0},
		color: {"black"},
		vertical: {0},
		italic: {""}
	]
	
	swap_fonts_name_default :=
	[
		name: {"Beleren Bold"},
		size: {30.0},
		color: {"black"},
		vertical: {0},
		italic: {""}
	]
	
	card_hybrid_2 :=
	{
		if type == "textbox" then masked_blend(mask: "special_blend_textbox.png", dark: template(colors.0), light: template(colors.1))
		else linear_blend(
			image1: template(colors[0]),
			image2: template(colors[1]),
			x1: 0.4,	y1: 0,
			x2: 0.6,	y2: 0
		)
	}
	horizontal_card_hybrid :=
	[
		0:	horizontal_card_hybrid[0]
		1:	horizontal_card_hybrid[1]
		2:	card_hybrid_2
		3:	horizontal_card_hybrid[3]
		4:	horizontal_card_hybrid[4]
		5:	horizontal_card_hybrid[5]
		6:	horizontal_card_hybrid[6]
		7:	horizontal_card_hybrid[7]
	]
	card_hybrid :=
	[
		radial:		card_hybrid["radial"]
		horizontal:	horizontal_card_hybrid
		overlay:	card_hybrid["overlay"]
		vertical:	card_hybrid["vertical"]
	]
	
	template_prefix :=
	[
		card:			"card/",
		textbox:		"textbox/",
		pt:				"pt/",
		crown:			"crown/",
		alias:			"alias/",
		identity:		"/magic-identity-new.mse-include/"
	]
	template_suffix :=
	[
		card:			"card.png",
		textbox:		"textbox.png",
		pt:				"pt.png",
		crown:			"crown.png",
		alias:			"alias.png",
		identity:		"identity.png"
	]
	template :=
	{
		template_prefix[type] +
		(if input == "c" and is_clear() then (if type == "card" or type == "textbox" then "cclear" else if type != "pt" then "a" else "c") else input) +
		template_suffix[type]
	}
	land_template :=
	{
		template_prefix[type] +
		(if input == "c" and is_clear() then (if type == "card" or type == "textbox" then "cclear" else if type != "pt" then "a" else "c") else input) +
		template_suffix[type]
	}
	
	card_background :=			{ color_background(input: card.card_color, type: "card",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_textbox :=				{ color_background(input: card.card_color, type: "textbox",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_alias :=				{ color_background(input: card.card_color, type: "alias",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_crown :=				{ color_background(input: card.card_color, type: "crown",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_ptbox :=				{ color_background(input: card.card_color, type: "pt",				base_hybrid: card_hybrid)		}@(offset:0 )
	
	pure_colors :=
	{
		sort_text(
			order: if card_is_wedge(input) then "(wbgur)" else "(wubrg)",
			(if chosen(card.card_color, choice:"white")	then "w") +
			(if chosen(card.card_color, choice:"blue")	then "u") +
			(if chosen(card.card_color, choice:"black")	then "b") +
			(if chosen(card.card_color, choice:"red")	then "r") +
			(if chosen(card.card_color, choice:"green")	then "g")
		)
	}
	pt_colors := { if styling.PT_color_scheme == "canon" then pt_colors_canon() else styling.PT_color_scheme }
	pt_colors_canon := { if is_hybrid_cost() then "land" else "gold" }
	
	is_promo := { styling.promo }
	
	is_unsorted := { styling.remove_from_autocount }
	
	is_aliased := { card.alias != "" }
	
	is_crowned := { styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and lang_setting("is_legendary")(card.super_type)) }
	
	is_land := { styling.land_frame == "yes" or (styling.land_frame == "if land" and lang_setting("is_land")(card.super_type)) }
	
	is_vehicle := { styling.vehicle_frame == "yes" or (styling.vehicle_frame == "if vehicle" and lang_setting("is_vehicle")(card.sub_type)) }
	
	frame_alpha :=
	{
		if styling.opacity_percentage == "" then
		(
			if pure_colors(card.card_color) == ""
			and	not lang_setting("is_land")(card.super_type)
			and	not lang_setting("is_artifact")(card.super_type)
			and	not contains(card.card_color, match:"artifact")
			and	not contains(card.card_color, match:"land")
			and	not contains(card.card_color, match:"hybrid")
			and	not contains(card.card_color, match:"multicolor")
			then 0.8
			else 1.0
		)
		else if styling.opacity_percentage == "100" then 1.0
		else clamp(styling.opacity_percentage/100, minimum: 0.0, maximum: 1.0)
	}
	is_clear := { frame_alpha() <= 0.995 }
	clear_mask :=
	{
		grey := frame_alpha() * 255
		combine_blend(image1: recolor_image("clear_mask.png", color: rgb(grey,grey,grey)), image2: if is_crowned() then "opaque_crown_mask.png" else "opaque_mask.png", combine: "add")
	}
	
	chop_top :=			{ split := split_comma(styling.chop_text_box); if length(split) > 0 and split[0] != "" and split[0] != "-" then clamp(split[0], maximum:500, minimum:-500) else 0 }
	chop_bottom :=		{ split := split_comma(styling.chop_text_box); if length(split) > 1 and split[1] != "" and split[1] != "-" then clamp(split[1], maximum:500, minimum:-500) else 0 }
	chop_right :=		{ split := split_comma(styling.chop_text_box); if length(split) > 2 and split[2] != "" and split[2] != "-" then clamp(split[2], maximum:500, minimum:-500) else 0 }
	
	popout_left :=		{ split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.0 != "" and split.0 != "-" then clamp(split.0, maximum:1500, minimum:-500) else 0 }
	popout_top :=		{ split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.1 != "" and split.1 != "-" then clamp(split.1, maximum:2000, minimum:-500) else 0 }
	popout_width :=		{ split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.2 != "" and split.2 != "-" then clamp(split.2, maximum:1500, minimum:0) else 0 }
	popout_height :=	{ split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.3 != "" and split.3 != "-" then clamp(split.3, maximum:2000, minimum:0) else 0 }
	
	a_saga := { true }
	
	abilities_count :=	{ to_int(styling.number_of_textboxes) }
	
	font_size :=
	{
		if styling.rule_text_font_cap == "" then 26 else to_number(styling.rule_text_font_cap)
	}
	
	level_cost_left :=		{ 382 }
	level_left :=			{ 534 }
	level_width :=			{ if styling.separator_type == "line (Case)" then 0 else if abilities_count() > input then 152 else 0 }
	default_level_width :=	{ if styling.separator_type == "line (Case)" then 0 else if abilities_count() > input and card["level_" + (input+1)] == "" then 152 else 0 }
	level_font_size :=		{ 22 }
	
	separator_image :=		{ "/magic-modules.mse-include/separators/" + card.separator + ".png" }
	separator_move :=		{ split := split_comma(styling.move_separators); if length(split) > input-1 and split[input-1] != "" and split[input-1] != "-" then clamp(split[input-1], maximum:500, minimum:-500) else 0 }
	separator_left :=		{ if styling.separator_type == "line (Case)" then 409 else 374 }
	separator_width :=		{ if styling.separator_type == "line (Case)" then 251 else 321 }
	separator_height :=		{ clamp((if styling.separator_type == "line (Case)" then 8 else 49) - separator_shrink(), minimum: 5, maximum: 100) }
	separator_top :=
	{
		if length(card_style.text.layout.separators) or else 0 > input-1
		then card_style.text.top + card_style.text.layout.separators[input-1] - separator_height()/2 + separator_move(input) - (if styling.separator_type == "line (Case)" then 2 else 0)
		else 1500
	}
	separator_shrink := 
	{
		count := abilities_count()
		(if count == 5 then 4 else if count == 6 then 7 else if count == 7 then 9 else 0) +
		(if styling.shrink_separators != "" and styling.shrink_separators != "-" then to_number(styling.shrink_separators) else 0)
	}
	
	alt_text := { true }
	alt_text_script :=
	{
		count := abilities_count()
		if count == 1 then
			forward_editor(field: card.level_1_text)
		else if count == 2 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text)
		else if count == 3 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text)
		else if count == 4 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text)
		else if count == 5 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text)
		else if count == 6 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text)
		else
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text, separator6: "<line>\n</line>", field7: card.level_7_text)
	}
	
	text_filter := text_filter + { if input == "" then "​" else input }		# There is a zero width space in the second ""

	text_alignment :=
	{
		if	(			styling.center_text == "short text only"
				and not	contains(match:"\n", card.rule_text)
				and		card.flavor_text == "<i-flavor></i-flavor>"
				and		card_style.text.content_lines <= 2
			)
			or	styling.center_text == "always"
		then "middle center"
		else "middle left"
	}

############################################################## Extra style options

styling field:
	type:			text
	name:			popout image coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch image to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no

include file: /magic-modules.mse-include/texts/styling_fields

styling field:
	type:			choice
	name:			number of textboxes
	description:	Number of textboxes for chapters and passives. MODIFY CONTENT OF TEXTBOXES IF THIS HAS TROUBLE UPDATING AFTER BEING CHANGED.
	choice:			1
	choice:			2
	choice:			3
	choice:			4
	choice:			5
	choice:			6
	choice:			7
	initial:		3
styling field:
	type:			choice
	name:			separator type
	description:	Is the card a class or a case?
	choice:			level (Class)
	choice:			line (Case)
	initial:		level (Class)
styling field:
	type:			text
	name:			move separators
	description:	Moves the level separators down by this many pixels. Use negatives to move up. Formatted as "1,2,3,4,5,6"
styling field:
	type:			text
	name:			shrink separators
	description:	Reduce the height of the level separators by this many pixels.
styling field:
	type:			boolean
	name:			separator notch
	description:	Add a triangular notch on the separators?
	initial:		yes
styling field:
	type:			choice
	name:			PT color scheme
	description:	Use the selected color scheme for the PT box on two color cards. Canon is "land" on hybrid cards, "gold" otherwise.
	choice:			canon
	choice:			gold
	choice:			hybrid
	choice:			colored
	choice:			land
	initial:		canon
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary
styling field:
	type:			choice
	name:			vehicle frame
	description:	Use the vehicle frame overlay?
	choice:			yes
	choice:			if vehicle
	choice:			no
	initial:		if vehicle
styling field:
	type:			choice
	name:			land frame
	description:	Use the land frame overlay?
	choice:			yes
	choice:			if land
	choice:			no
	initial:		if land
styling field:
	type:			text
	name:			opacity percentage
	description:	Use a clear frame with the given opacity. Default is 80 for colorless non-artifact cards, and 100 for all other cards.

include file: /magic-modules.mse-include/stamps/styling_fields

include file: /magic-modules.mse-include/rarities/styling_fields

include file: /magic-modules.mse-include/watermarks/styling_fields

styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false

include file: /magic-modules.mse-include/information/styling_fields

include file: /magic-modules.mse-include/symbol-fonts/styling_fields

include file: /magic-modules.mse-include/fonts/styling_fields

styling field:
	type:			text
	name:			custom level font
	description:	Font used for the level label text. Hover your mouse over the font file to see it's details in a yellow popup, and write it's Title here.

############################################################## Card fields

include file: /magic-modules.mse-include/information/card_fields

include file: /magic-modules.mse-include/stamps/card_fields

include file: /magic-modules.mse-include/corners/card_fields

include file: /magic-modules.mse-include/namelines/card_fields

include file: /magic-modules.mse-include/typelines/card_fields

card style:
	############################# Background stuff
	border color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			9
		mask:				border_mask.png
	card color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			10
		render style:		image
		popup style:		in place
		image:				{ card_background() }
		mask:				{ if is_clear() then clear_mask() else "card_mask.png" }
	############################# Name line
	alias:
		left:				108
		top:				116
		right:				641
		height:				28
		z index:			300
		alignment:			middle center shrink-overflow
		font:
			name:				MPlantin-Italic
			size:				18
			color:				white
			weight:				bold
	############################# Image
	image:
		left:				{ if styling.stretch_image_to_whole_card then 0							else if is_clear() then 30	else 57 }
		top:				{ if styling.stretch_image_to_whole_card then 0							else if is_clear() then 29	else 118 }
		width:				{ if styling.stretch_image_to_whole_card then stylesheet.card_width		else if is_clear() then 690	else 317 }
		height:				{ if styling.stretch_image_to_whole_card then stylesheet.card_height	else if is_clear() then 933	else 758 }
		z index:			0
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			400
	############################# Text box
	text:
		left:				382
		top:				{ (if card.alias != "" then 156 else 126) + chop_top() }
		width:				304
		height:				{ (if card.alias != "" then 710 else 740) - chop_top() - chop_bottom() }
		z index:			1000
		alignment:			{ text_alignment() }
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			scale down to:		12
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			scale down to:		12
		line height hard:	{ if is_modal(card.chapter_text) then 0.9 else 1.2 }
		line height line:	{ clamp((if styling.separator_type == "line (Case)" then 35 else 49) - separator_shrink()/2, minimum: 5, maximum: 100) * 0.055 }
		line height soft:	0.9
	level 9 text:
		left:				{ level_cost_left() }
		width:				{ level_width(1) }
		top:				{ separator_top(1) + 2 }
		height:				{ separator_height() - 4 }
		z index:			1010
		alignment:			middle left
		font:
			name:				{ pt2_font() }
			italic name:		{ pt2_font_italic() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			scale down to:		8
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ pt2_font_size() }
			scale down to:		8
	level 2:
		left:				{ level_left() }
		width:				{ level_width(1) }
		top:				{ separator_top(1) + 2 }
		height:				{ separator_height() - 4 }
		z index:			1010
		alignment:			middle right
		font:
			name:				{ pt2_font() }
			italic name:		{ pt2_font_italic() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			scale down to:		8
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ pt2_font_size() }
			scale down to:		8
	level 10 text:
		left:				{ level_cost_left() }
		width:				{ level_width(2) }
		top:				{ separator_top(2) + 2 }
		height:				{ separator_height() - 4 }
		z index:			1010
		alignment:			middle left
		font:
			name:				{ pt2_font() }
			italic name:		{ pt2_font_italic() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			scale down to:		8
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ pt2_font_size() }
			scale down to:		8
	level 3:
		left:				{ level_left() }
		width:				{ level_width(2) }
		top:				{ separator_top(2) + 2 }
		height:				{ separator_height() - 4 }
		z index:			1010
		alignment:			middle right
		font:
			name:				{ pt2_font() }
			italic name:		{ pt2_font_italic() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			scale down to:		8
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ pt2_font_size() }
			scale down to:		8
	level 11 text:
		left:				{ level_cost_left() }
		width:				{ level_width(3) }
		top:				{ separator_top(3) + 2 }
		height:				{ separator_height() - 4 }
		z index:			1010
		alignment:			middle left
		font:
			name:				{ pt2_font() }
			italic name:		{ pt2_font_italic() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			scale down to:		8
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ pt2_font_size() }
			scale down to:		8
	level 4:
		left:				{ level_left() }
		width:				{ level_width(3) }
		top:				{ separator_top(3) + 2 }
		height:				{ separator_height() - 4 }
		z index:			1010
		alignment:			middle right
		font:
			name:				{ pt2_font() }
			italic name:		{ pt2_font_italic() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			scale down to:		8
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ pt2_font_size() }
			scale down to:		8
	level 12 text:
		left:				{ level_cost_left() }
		width:				{ level_width(4) }
		top:				{ separator_top(4) + 2 }
		height:				{ separator_height() - 4 }
		z index:			1010
		alignment:			middle left
		font:
			name:				{ pt2_font() }
			italic name:		{ pt2_font_italic() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			scale down to:		8
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ pt2_font_size() }
			scale down to:		8
	level 5:
		left:				{ level_left() }
		width:				{ level_width(4) }
		top:				{ separator_top(4) + 2 }
		height:				{ separator_height() - 4 }
		z index:			1010
		alignment:			middle right
		font:
			name:				{ pt2_font() }
			italic name:		{ pt2_font_italic() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			scale down to:		8
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ pt2_font_size() }
			scale down to:		8
	level 13 text:
		left:				{ level_cost_left() }
		width:				{ level_width(5) }
		top:				{ separator_top(5) + 2 }
		height:				{ separator_height() - 4 }
		z index:			1010
		alignment:			middle left
		font:
			name:				{ pt2_font() }
			italic name:		{ pt2_font_italic() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			scale down to:		8
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ pt2_font_size() }
			scale down to:		8
	level 6:
		left:				{ level_left() }
		width:				{ level_width(5) }
		top:				{ separator_top(5) + 2 }
		height:				{ separator_height() - 4 }
		z index:			1010
		alignment:			middle right
		font:
			name:				{ pt2_font() }
			italic name:		{ pt2_font_italic() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			scale down to:		8
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ pt2_font_size() }
			scale down to:		8
	level 14 text:
		left:				{ level_cost_left() }
		width:				{ level_width(6) }
		top:				{ separator_top(6) + 2 }
		height:				{ separator_height() - 4 }
		z index:			1010
		alignment:			middle left
		font:
			name:				{ pt2_font() }
			italic name:		{ pt2_font_italic() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			scale down to:		8
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ pt2_font_size() }
			scale down to:		8
	level 7:
		left:				{ level_left() }
		width:				{ level_width(6) }
		top:				{ separator_top(6) + 2 }
		height:				{ separator_height() - 4 }
		z index:			1010
		alignment:			middle right
		font:
			name:				{ pt2_font() }
			italic name:		{ pt2_font_italic() }
			size:				{ pt2_font_size() }
			color:				{ pt2_font_color() }
			scale down to:		8
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ pt2_font_size() }
			scale down to:		8
	separator:
		left:				{ separator_left() }
		top:				{ separator_top(1) }
		width:				{ separator_width() }
		height:				{ separator_height() }
		z index:			710
		visible:			{ abilities_count() > 1 }
		render style:		image
		image:				{ separator_image() }
	separator 2:
		left:				{ separator_left() }
		top:				{ separator_top(2) }
		width:				{ separator_width() }
		height:				{ separator_height() }
		z index:			710
		visible:			{ abilities_count() > 2 }
		render style:		image
		image:				{ separator_image() }
	separator 3:
		left:				{ separator_left() }
		top:				{ separator_top(3) }
		width:				{ separator_width() }
		height:				{ separator_height() }
		z index:			710
		visible:			{ abilities_count() > 3 }
		render style:		image
		image:				{ separator_image() }
	separator 4:
		left:				{ separator_left() }
		top:				{ separator_top(4) }
		width:				{ separator_width() }
		height:				{ separator_height() }
		z index:			710
		visible:			{ abilities_count() > 4 }
		render style:		image
		image:				{ separator_image() }
	separator 5:
		left:				{ separator_left() }
		top:				{ separator_top(5) }
		width:				{ separator_width() }
		height:				{ separator_height() }
		z index:			710
		visible:			{ abilities_count() > 5 }
		render style:		image
		image:				{ separator_image() }
	separator 6:
		left:				{ separator_left() }
		top:				{ separator_top(6) }
		width:				{ separator_width() }
		height:				{ separator_height() }
		z index:			710
		visible:			{ abilities_count() > 6 }
		render style:		image
		image:				{ separator_image() }
	watermark:
		left:				356
		top:				360
		right:				715
		height:				274
		z index:			29
		alignment:			middle center
		popup style:		in place
		render style:		image
		include file:		/magic.mse-game/watermarks/menu_choice_images
		image:				{ watermark_image_1() }
	############################# PT
	pt:
		left:				599
		top:				825
		width:				93
		height:				43
		z index:			1010
		alignment:			center middle shrink-overflow
		font:
			name:				{ pt_font() }
			italic name:		{ pt_font_italic() }
			size:				{ pt_font_size() }
			color:				{ pt_font_color() }
			separator color:	red

############################################################## Extra card fields

extra card field:
	type:				choice
	name:				textbox
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				pt box
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				alias box
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				crown
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				crown clear shadow
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				color
	name:				crown border
	script:				card.border_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				foil layer
	editable:			false
	save value:			false
	show statistics:	false
	choice:				foil layer
extra card field:
	type:				choice
	name:				land overlay
	editable:			false
	save value:			false
	show statistics:	false
	choice:				land overlay
extra card field:
	type:				choice
	name:				vehicle overlay
	editable:			false
	save value:			false
	show statistics:	false
	choice:				vehicle overlay
extra card field:
	type:				color
	name:				card stamp border
	script:				card.border_color
	editable:			false
	save value:			false
	show statistics:	false

extra card style:
	textbox:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			10
		render style:		image
		image:				{ card_textbox() }
		mask:				{ if is_clear() then clear_mask() else "card_mask.png" }
	pt box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			800
		visible:			{ card.pt != "" }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				color := pt_colors()
				if is_vehicle() then "vpt.png"
				else if color == "gold" and count > 1 then template("m", type: "pt")
				else if color == "land" and count > 1 then template("c", type: "pt")
				else if color == "hybrid" and count == 2 then masked_blend(mask: "special_blend_pt.png", dark: template(pure.0, type: "pt"), light: template(pure.1, type: "pt"))
				else card_ptbox()
	foil layer:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			3000
		visible:			{ styling.overlay != "none" and styling.overlay != "" }
		render style:		image
		image:				{ if styling.overlay == "" then "" else styling.overlay + "/overlay.png" }
		mask:				{ "foil_mask" + (if is_stamped() then "_rare" else "") + (if is_crowned() then "_crown" else "") + ".png"}
	land overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			38
		visible:			{ is_land() }
		render style:		image
		image:				loverlay.png
	vehicle overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			39
		visible:			{ is_vehicle() }
		render style:		image
		image:				voverlay.png
	alias box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			40
		visible:			{ is_aliased() }
		render style:		image
		image:				{ card_alias() }
	crown:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			41
		visible:			{ is_crowned() }
		render style:		image
		image:				{ card_crown() }
	crown clear shadow:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			42
		visible:			{ is_crowned() and is_clear() }
		render style:		image
		image:				shadow_clear_crown.png
	crown border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			40
		visible:			{ is_crowned() }
		mask:				crown_border_mask.png
	card stamp border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			41
		visible:			{ is_stamped() }
		mask:				stamp_border_mask.png
