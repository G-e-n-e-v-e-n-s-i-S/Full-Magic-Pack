mse version: 2.1.2
game: magic
short name: M15 CS Saga
full name: Classicshifted Saga
icon: card-sample.png
position hint: 280

version: 2024-08-01
depends on:
	package: magic.mse-game
	version: 2014-06-25
depends on:
	package: magic-modules.mse-include
	version: 2024-05-20
depends on:
	package: magic-m15-classicshifted-shared.mse-include
	version: 2024-08-01
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2007-09-23

card width: 750
card height: 1046
card dpi: 300

### blanks by iDerp, tweaks by GenevensiS
### code by GenevensiS

############################################################## Extra scripts
init script:
	card_shape := { "saga" }
	
	nameline_offset_top_1 := { if is_crowned() then -7 else -16 }
	casting_cost_offset_top_1 := { 1 }
	transform_symbol_offset_left_1 := { 18 }
	transform_symbol_offset_top_1 := { 14 }
	transform_symbol_offset_width_1 := { -28 }
	transform_symbol_offset_height_1 := { -28 }
	name_transform_symbol_offset_left_1 := { -18 }
	card_symbol_offset_left_1 := { -12 }
	card_symbol_offset_top_1 := { 5 }
	card_symbol_offset_width_1 := { -6 }
	card_symbol_offset_height_1 := { -6 }
	name_card_symbol_offset_left_1 := { 12 }
	
	transform_symbol_disabled_2 := { true }
	card_symbol_disabled_2 := { true }
	nameline_offset_top_2 := { -8 }
	nameline_offset_height_2 := { 16 }
	nameline_offset_left_2 := { -32 }
	nameline_offset_width_2 := { 36 }
	
	typeline_offset_top_1 := { 299 }
	typeline_offset_left_1 := { -2 }
	rarity_offset_left_1 := { 4 }
	rarity_offset_top_1 := { 2 }
	
	typeline_offset_top_2 := { -128 }
	typeline_offset_height_2 := { 16 }
	typeline_offset_left_2 := { -30 }
	typeline_offset_width_2 := { 46 }
	rarity_disabled_2 := { true }
	
	card_stamp_offset_top_1 := { -2 }
	card_stamp_offset_height_1 := { 12 }
	card_stamp_offset_left_1 := { -6 }
	card_stamp_offset_width_1 := { 12 }
	
	swap_fonts_pt_default :=
	[
		name: {"Beleren Bold"},
		size: {30.0},
		color: {"white"},
		vertical: {0},
		italic: {"Beleren Bold"}
	]
	swap_fonts_body_default :=
	[
		name: {"MPlantin"},
		size: {font_size(desired_relative_heights: text_relative_heights())},
		color: {"black"},
		vertical: {0},
		italic: {"MPlantin-Italic"}
	]
	swap_fonts_type_default :=
	[
		name: {"Beleren Bold"},
		size: {26.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	swap_fonts_name_default :=
	[
		name: {"Beleren Bold"},
		size: {28.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	
	template_prefix :=
	[
		card:			{ if is_crowned() then "crown/" else "card/" }
		transform:		{ "transform/" }
		pt:				{ "/magic-m15-classicshifted-shared.mse-include/pt_saga/" }
		identity:		{ "/magic-modules.mse-include/indicators/" }
		crown:			{ "crown/" }
	]
	template_suffix :=
	[
		card:			"card.png"
		transform:		"card.png"
		pt:				"pt.png"
		identity:		"identity.png"
		crown:			"card.png"
	]
	template :=			{ template_prefix[type]() + input + template_suffix[type] }
	land_template :=	{ template_prefix[type]() + (if input == "a" then "c" else input) + "l" + template_suffix[type] }
	
	card_transform :=	{ color_background(type:"transform",	base_hybrid:card_hybrid) }
	card_crown :=		{ color_background(type:"crown",		base_hybrid:card_hybrid) }
	card_ptbox :=		{ color_background(type:"pt",			base_hybrid:card_hybrid) }
	
	is_clear :=
	{
		styling.clear_frame == "yes" or
		(
			styling.clear_frame == "if colorless" and
			not lang_setting("is_artifact")(card.super_type) and
			not lang_setting("is_land")(card.super_type) and
			not contains(card.card_color, match: "white") and
			not contains(card.card_color, match: "blue") and
			not contains(card.card_color, match: "black") and
			not contains(card.card_color, match: "red") and
			not contains(card.card_color, match: "green") and
			not contains(card.card_color, match: "land") and
			not contains(card.card_color, match: "artifact") and
			not contains(card.card_color, match: "multicolor")
		)
	}
	is_crowned := { styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and lang_setting("is_legendary")(card.super_type)) }
	is_nyx := { styling.nyx_frame == "yes" or (styling.nyx_frame == "if enchantment" and lang_setting("is_nyx")(card.super_type)) }
	is_vehicle := { styling.vehicle_frame == "yes" or (styling.vehicle_frame == "if vehicle" and lang_setting("is_vehicle")(card.sub_type)) }
	is_miracle := { styling.miracle_frame == "yes" or (styling.miracle_frame == "if miracle" and lang_setting("is_miracle")(card.text)) }
	is_notched := { styling.transformation_reminder }
	has_identity := { styling.color_indicator_dot }
	has_identity_2 := { false }
	has_identity_3 := { false }
	
	chop_top :=			{ split := split_comma(styling.chop_text_box); if length(split) > 0 and split.0 != "" then clamp(split.0, maximum: 500, minimum: -500) else 0 }
	chop_bot :=			{ split := split_comma(styling.chop_text_box); if length(split) > 1 and split.1 != "" then clamp(split.1, maximum: 500, minimum: -500) else 0 }
	
	popout_left :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.0 != "" and split.0 != "-" then clamp(split.0, maximum:1500, minimum:-500) else 0 }
	popout_top :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.1 != "" and split.1 != "-" then clamp(split.1, maximum:2000, minimum:-500) else 0 }
	popout_width :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.2 != "" and split.2 != "-" then clamp(split.2, maximum:1500, minimum:0) else 0 }
	popout_height :=	{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.3 != "" and split.3 != "-" then clamp(split.3, maximum:2000, minimum:0) else 0 }
	
	
	saga_chapter_text_left :=			{ 74 }
	saga_chapter_text_top :=			{ if is_crowned() then 120 else 112 }
	
	saga_chapter_text_padding_bottom :=	{ 4 }
	
	saga_text_left :=					{ 87 }
	saga_text_top :=					{ 274 }
	saga_text_width :=					{ 274 }
	saga_text_height :=					{ 594 }
	
	saga_text_font_size_cap :=			{ 24 }
	
	chapter_left :=					{ 24 }
	chapter_width :=				{ 58 }
	chapter_height :=				{ 66 }
	
	chapter_spacing :=				{ 9 }
	
	separator_left :=				{ 77 }
	separator_width :=				{ 289 }
	separator_height :=				{ 24 }
	
	separator_padding :=			{ -4 }
	
	saga_reminder :=
	{
		number_of_chapters := if styling.snap_chapter_to_box != "" then min(7,length(split_comma(styling.snap_chapter_to_box))) else styling.number_of_textboxes
		if styling.default_reminder != "" then replace(styling.default_reminder, match: "\\[number of chapters\\]", replace: roman_numeral_map[number_of_chapters])
		else "As this Saga enters and after your draw step, add a lore counter. Sacrifice after " + roman_numeral_map[number_of_chapters] + "."
	}
	
	chapter_image :=
	{
		path := styling.custom_chapter_icons
		if contains(path, match: ".png") then (if path.0 == "/" then "" else "/") + (un_png(path) + "_" + input + ".png")
		else "/magic-modules.mse-include/chapters/chapter" + input + ".png"
	}
	
	a_saga := { true }
	
	chapter_move :=		{ split := split_comma(styling.move_chapter_icons);		if length(split) > input-1 and split[input-1] != "" and split[input-1] != "-" then clamp(split[input-1], maximum:700, minimum:-700) else 0 }
	separator_move :=	{ split := split_comma(styling.move_separators);		if length(split) > input-1 and split[input-1] != "" and split[input-1] != "-" then clamp(split[input-1], maximum:500, minimum:-500) else 0 }
	textbox_move :=		{ split := split_comma(styling.move_textbox_bottoms);	if length(split) > input-1 and split[input-1] != "" and split[input-1] != "-" then clamp(split[input-1], maximum:500, minimum:-500) else 0 }
	
	abilities_count :=	{ to_int(styling.number_of_textboxes) }
	
	
	chapter_indexes :=
	{
		snaps := if styling.snap_chapter_to_box == "" then [1,2,3,4,5,6,7,8] else split_comma(styling.snap_chapter_to_box)
		snaps_count := length(snaps)
		for c from 0 to 7 do
		(
			if c >= snaps_count then [-1]
			else
			(
				index := (to_int(trim(snaps[c])) or else -1) - 1
				if index > active_count or index < 0 then [-1]
				else [index]
			)
		)
	}
	
	font_size :=
	{
		active_count := abilities_count() - 1
		
		total_desired_relative_height := for x from 0 to active_count do (desired_relative_heights[x])
		total_available_height := saga_text_height() - chop_top() - chop_bot()
		optimal_font_size := if total_desired_relative_height == 0 then saga_text_font_size_cap() else total_available_height / total_desired_relative_height
		#trace(optimal_font_size)
		clamp(optimal_font_size, minimum: 4, maximum: saga_text_font_size_cap())
	}
	
	text_relative_heights :=
	{
		active_count := abilities_count() - 1
		
		hard_line_height := 1.555 * card_style.level_1_text.line_height_hard
		soft_line_height := 1.555 * card_style.level_1_text.line_height_soft
		last_line_height := 1.222
		
		content_line_counts := for x from 0 to active_count do [card_style["level_" + (x+1) + "_text"].content_lines]
		hard_line_counts := for x from 0 to active_count do [length(card_style["level_" + (x+1) + "_text"].layout.paragraphs)-1]
		soft_line_counts := for x from 0 to active_count do [content_line_counts[x] - hard_line_counts[x] - 1]
		
		for x from 0 to active_count do [hard_line_counts[x] * hard_line_height + soft_line_counts[x] * soft_line_height + last_line_height]
	}
	
	textbox_heights :=
	{
		###force proper initialization of card_style values
		hack := card_style.level_1_text.content_width
		
		active_count := abilities_count() - 1
		
		chapter_indexes := chapter_indexes(active_count: active_count)
		chaptertrain_0_count := 0
		chaptertrain_1_count := 0
		chaptertrain_2_count := 0
		chaptertrain_3_count := 0
		chaptertrain_4_count := 0
		chaptertrain_5_count := 0
		chaptertrain_6_count := 0
		chaptertrain_7_count := 0
		for c from 0 to 7 do
		(
			if		chapter_indexes[c] == -1 then	(0)
			else if	chapter_indexes[c] == 0 then	(chaptertrain_0_count := chaptertrain_0_count + 1)
			else if	chapter_indexes[c] == 1 then	(chaptertrain_1_count := chaptertrain_1_count + 1)
			else if	chapter_indexes[c] == 2 then	(chaptertrain_2_count := chaptertrain_2_count + 1)
			else if	chapter_indexes[c] == 3 then	(chaptertrain_3_count := chaptertrain_3_count + 1)
			else if	chapter_indexes[c] == 4 then	(chaptertrain_4_count := chaptertrain_4_count + 1)
			else if	chapter_indexes[c] == 5 then	(chaptertrain_5_count := chaptertrain_5_count + 1)
			else if	chapter_indexes[c] == 6 then	(chaptertrain_6_count := chaptertrain_6_count + 1)
			else									(chaptertrain_7_count := chaptertrain_7_count + 1)
		)
		chaptertrain_counts_per_textbox := [chaptertrain_0_count, chaptertrain_1_count, chaptertrain_2_count, chaptertrain_3_count, chaptertrain_4_count, chaptertrain_5_count, chaptertrain_6_count, chaptertrain_7_count]
		chaptertrain_desired_heights := for x from 0 to active_count do [chaptertrain_counts_per_textbox[x] * (chapter_height() + chapter_spacing())]
		
		text_desired_relative_heights := text_relative_heights()
		text_desired_font_size := font_size(desired_relative_heights: text_desired_relative_heights)
		text_desired_heights := for x from 0 to active_count do [text_desired_relative_heights[x] * text_desired_font_size]
		
		chapter_spacing_importance := (if styling.chapter_spacing_percentage == "" then 70 else clamp(styling.chapter_spacing_percentage or else 70, minimum: 0, maximum: 100)) / 100
		
		textbox_desired_heights := for x from 0 to active_count do [max(text_desired_heights[x], chapter_spacing_importance * chaptertrain_desired_heights[x])]
		
		total_desired_height := for x from 0 to active_count do textbox_desired_heights[x]
		
		total_available_height := saga_text_height() - chop_top() - chop_bot()
		
		missing := ( total_desired_height - total_available_height ) / ( active_count + 1 )
		factor := total_available_height / total_desired_height
		
		###when resizing, always make small textboxes as big as possible, to make for a more balanced looking card
		textbox_effective_heights :=	if missing <= 0 then	(for x from 0 to active_count do [textbox_desired_heights[x] - missing])	#when increasing size, add equally to each textbox
										else					(for x from 0 to active_count do [textbox_desired_heights[x] * factor])		#when decreasing size, do it in percentage, taking away more from big textboxes
		
		textbox_effective_heights
	}
	
	chapter_info :=
	{
		chapter_indexes := chapter_indexes(active_count: abilities_count() - 1);
		index := chapter_indexes[input]
		if index == -1 then [-1,-1,-1]
		else
		(
			subindex :=	if input == 0 then 0
						else (for c from 0 to (input-1) do (if chapter_indexes[c] == index then 1 else 0))
			count :=	subindex + 1 + (for c from (input+1) to 6 do (if chapter_indexes[c] == index then 1 else 0))
			[index, subindex, count]
		)
	}
	
	chapter_top :=
	{
		hack_to_force_update := card_style.level_1_text.content_width
		
		chapter_info := chapter_info(input)
		if chapter_info[0] == -1 then stylesheet.card_height+1
		else
		(
			index := chapter_info[0]
			subindex := chapter_info[1]
			count := chapter_info[2]
			desired_chapter_height := count * chapter_height()																###how much total space do the chapter icons want
			desired_spacing := (count-1) * chapter_spacing()																###how much total space do the gaps between chapters want
			desired_height := desired_chapter_height + desired_spacing														###how much total space do the chapters and gaps between them want
			textbox_height := card_style["level_" + (index+1) + "_text"].height												###how much space does the textbox offer
			missing_height := desired_height - textbox_height																###how much space is missing from the textbox
			effective_spacing := desired_spacing - max(missing_height, 0)													###how much total space do the gaps between chapters actually have
			effective_spacing := max(effective_spacing, (count-1) * (chapter_spacing() - chapter_height()))					###chapters must always be at least chapter_spacing() pixels below the previous one
			effective_spacing_per_chapter := effective_spacing / max(count-1,1)												###how much space does each gap have (can be negative, chapters will then overlap)
			effective_height := desired_chapter_height + effective_spacing													###how much total space do the chapters and gaps between and around them want
			offset := (textbox_height - effective_height)/2
			top := card_style["level_" + (index+1) + "_text"].top + offset + subindex * (chapter_height() + effective_spacing_per_chapter)
			
			#trace("desired_chapter_height "			+ desired_chapter_height)
			#trace("desired_spacing "				+ desired_spacing)
			#trace("desired_height "					+ desired_height)
			#trace("textbox_height "					+ textbox_height)
			#trace("missing_height "					+ missing_height)
			#trace("effective_spacing "				+ effective_spacing)
			#trace("effective_spacing_per_chapter "	+ effective_spacing_per_chapter)
			#trace("effective_height "				+ effective_height)
			#trace("offset "							+ offset)
			#trace("top "							+ top)
			
			top
		)
	}
	
	text_alignment :=
	{
		if	(			styling.center_text == "short text only"
				and not	contains(match:"\n", card.rule_text)
				and		card.flavor_text == "<i-flavor></i-flavor>"
				and		card_style.text.content_lines <= 2
			)
			or	styling.center_text == "always"
		then "middle center"
		else "middle left"
	}

############################################################## Extra style options
styling field:
	type:			text
	name:			text font size
	description:	Sets the font size of ability textboxes. MUST BE CHANGED MANUALLY IF THERE IS NOT ENOUGH ROOM ON THE CARD. Default is 24.
	default:		24
styling field:
	type:			text
	name:			popout art coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch art to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no

include file: /magic-modules.mse-include/texts/styling_fields

styling field:
	type:			choice
	name:			number of textboxes
	description:	Number of textboxes for chapters and passives. MODIFY CONTENT OF TEXTBOXES IF THIS HAS TROUBLE UPDATING AFTER BEING CHANGED.
	choice:			1
	choice:			2
	choice:			3
	choice:			4
	choice:			5
	choice:			6
	choice:			7
	choice:			8
	initial:		3
styling field:
	type:			text
	name:			snap chapter to box
	description:	Sets the chapter icons to the given textbox. For example "1,1,2" puts chapters I and II on Ability 1, and chapter III on Ability 2. Max 7 chapters.
styling field:
	type:			text
	name:			chapter spacing percentage
	description:	Determines the behavior of chapter icons when there is not enough space. 0 clumps them together. 100 spreads them apart as much as possible. Default is 70.
styling field:
	type:			text
	name:			custom chapter icons
	description:	The file path (starting from the data folder) of '.png' images used for chapter icons. Write /PATH/NAME.png here. Save images as /PATH/NAME_1.png, /PATH/NAME_2.png, etc...
styling field:
	type:			text
	name:			move chapter icons
	description:	Moves chapter icons down by this many pixels. Use negatives to move up. Formatted as "1,2,3,4,5,6,7"
styling field:
	type:			text
	name:			move separators
	description:	Moves the gray lines separating abilities down by this many pixels. Use negatives to move up. Formatted as "1,2,3,4,5,6"
styling field:
	type:			text
	name:			move textbox bottoms
	description:	Moves the bottom of each textbox down by this many pixels. Use negatives to move up. Formatted as "1,2,3,4,5,6,7"
styling field:
	type:			text
	name:			default reminder
	description:	Change the reminder text that is generated for new cards. RELOAD DATA IF THIS DOES NOT SHOW UP. Use [number of chapters] to stand in dynamically for the number of chapters.
styling field:
	type:			boolean
	name:			transformation reminder
	description:	Add a transformation notch and p/t
	initial:		no
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary
styling field:
	type:			choice
	name:			clear frame
	description:	Use a see-through frame?
	choice:			yes
	choice:			if colorless
	choice:			no
	initial:		if colorless
styling field:
	type:			choice
	name:			vehicle frame
	description:	Use the vehicle frame overlay?
	choice:			yes
	choice:			if vehicle
	choice:			no
	initial:		if vehicle
styling field:
	type:			choice
	name:			nyx frame
	description:	Use the nyx frame overlay?
	choice:			yes
	choice:			if enchantment
	choice:			no
	initial:		if enchantment
styling field:
	type:			choice
	name:			miracle frame
	description:	Use the miracle frame overlay?
	choice:			yes
	choice:			if miracle
	choice:			no
	initial:		if miracle

include file: /magic-modules.mse-include/rarities/styling_fields

include file: /magic-modules.mse-include/indicators/styling_fields

include file: /magic-modules.mse-include/watermarks/styling_fields

styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false

include file: /magic-modules.mse-include/information/styling_fields

include file: /magic-modules.mse-include/symbol-fonts/styling_fields

include file: /magic-modules.mse-include/fonts/styling_fields

############################################################## Card fields

include file: /magic-modules.mse-include/information/card_fields

include file: /magic-modules.mse-include/stamps/card_fields

include file: /magic-modules.mse-include/corners/card_fields

include file: /magic-modules.mse-include/watermarks/card_fields

include file: /magic-modules.mse-include/separators/card_fields

include file: /magic-modules.mse-include/namelines/card_fields

include file: /magic-modules.mse-include/typelines/card_fields

card style:
	############################# Background stuff
	card color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			1
		popup style:		in place
		render style:		image
		image:				{ if is_clear() then "" else card_background() }
		mask:				masks/card_mask.png
	
	############################# Image
	image:
		left:				{ if styling.stretch_art_to_whole_card then 0						else if is_crowned() and is_clear() then 11		else if is_clear() then 29									else 375 }
		top:				{ if styling.stretch_art_to_whole_card then 0						else if is_crowned() and is_clear() then 15		else if is_clear() then 30	else if is_crowned() then 105	else 98 }
		right:				{ if styling.stretch_art_to_whole_card then stylesheet.card_width	else if is_crowned() and is_clear() then 739	else if is_clear() then 721									else 690 }
		bottom:				{ if styling.stretch_art_to_whole_card then stylesheet.card_height	else if is_crowned() and is_clear() then 971	else if is_clear() then 971									else 882 }
		z index:			0
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			1000
	
	############################# Text box
	chapter text:
		left:				{ saga_chapter_text_left() }
		top:				{ saga_chapter_text_top() + body_font_vertical() }
		width:				{ (saga_text_left() - saga_chapter_text_left()) + saga_text_width() }
		bottom:				{ saga_text_top() + body_font_vertical() }
		z index:			900
		alignment:			middle left
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			scale down to:		7
		padding bottom:		{ separator_height()/2 + saga_chapter_text_padding_bottom() + separator_padding() }
		line height hard:	{ if is_modal(card.chapter_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.chapter_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 1 text:
		left:				{ saga_text_left() }
		top:				{ saga_text_top() + chop_top() + body_font_vertical() }
		width:				{ saga_text_width() }
		height:				{ textbox_heights()[0] + textbox_move(1) }
		z index:			900
		alignment:			{ text_alignment() }
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			# scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			# scale down to:		7
		padding top:		{ separator_height()/2 + separator_padding() }
		padding bottom:		{ if abilities_count() > 1 then separator_height()/2 + separator_padding() else 0 }
		line height hard:	{ if is_modal(card.level_1_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_1_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 2 text:
		left:				{ saga_text_left() }
		top:				{ card_style.level_1_text.bottom + body_font_vertical() }
		width:				{ saga_text_width() }
		height:				{ if abilities_count() > 1 then textbox_heights()[1] + textbox_move(2) else 0 }
		z index:			900
		alignment:			{ text_alignment() }
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			# scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			# scale down to:		7
		padding top:		{ separator_height()/2 + separator_padding() }
		padding bottom:		{ if abilities_count() > 2 then separator_height()/2 + separator_padding() else 0 }
		line height hard:	{ if is_modal(card.level_2_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_2_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 3 text:
		left:				{ saga_text_left() }
		top:				{ card_style.level_2_text.bottom + body_font_vertical() }
		width:				{ saga_text_width() }
		height:				{ if abilities_count() > 2 then textbox_heights()[2] + textbox_move(3) else 0 }
		z index:			900
		alignment:			{ text_alignment() }
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			# scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			# scale down to:		7
		padding top:		{ separator_height()/2 + separator_padding() }
		padding bottom:		{ if abilities_count() > 3 then separator_height()/2 + separator_padding() else 0 }
		line height hard:	{ if is_modal(card.level_3_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_3_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 4 text:
		left:				{ saga_text_left() }
		top:				{ card_style.level_3_text.bottom + body_font_vertical() }
		width:				{ saga_text_width() }
		height:				{ if abilities_count() > 3 then textbox_heights()[3] + textbox_move(4) else 0 }
		z index:			900
		alignment:			{ text_alignment() }
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			# scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			# scale down to:		7
		padding top:		{ separator_height()/2 + separator_padding() }
		padding bottom:		{ if abilities_count() > 4 then separator_height()/2 + separator_padding() else 0 }
		line height hard:	{ if is_modal(card.level_4_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_4_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 5 text:
		left:				{ saga_text_left() }
		top:				{ card_style.level_4_text.bottom + body_font_vertical() }
		width:				{ saga_text_width() }
		height:				{ if abilities_count() > 4 then textbox_heights()[4] + textbox_move(5) else 0 }
		z index:			900
		alignment:			{ text_alignment() }
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			# scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			# scale down to:		7
		padding top:		{ separator_height()/2 + separator_padding() }
		padding bottom:		{ if abilities_count() > 5 then separator_height()/2 + separator_padding() else 0 }
		line height hard:	{ if is_modal(card.level_5_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_5_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 6 text:
		left:				{ saga_text_left() }
		top:				{ card_style.level_5_text.bottom + body_font_vertical() }
		width:				{ saga_text_width() }
		height:				{ if abilities_count() > 5 then textbox_heights()[5] + textbox_move(6) else 0 }
		z index:			900
		alignment:			{ text_alignment() }
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			# scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			# scale down to:		7
		padding top:		{ separator_height()/2 + separator_padding() }
		padding bottom:		{ if abilities_count() > 6 then separator_height()/2 + separator_padding() else 0 }
		line height hard:	{ if is_modal(card.level_6_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_6_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 7 text:
		left:				{ saga_text_left() }
		top:				{ card_style.level_6_text.bottom + body_font_vertical() }
		width:				{ saga_text_width() }
		height:				{ if abilities_count() > 6 then textbox_heights()[6] + textbox_move(7) else 0 }
		z index:			900
		alignment:			{ text_alignment() }
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			# scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			# scale down to:		7
		padding top:		{ separator_height()/2 + separator_padding() }
		padding bottom:		{ if abilities_count() > 7 then separator_height()/2 + separator_padding() else 0 }
		line height hard:	{ if is_modal(card.level_7_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_7_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 8 text:
		left:				{ saga_text_left() }
		top:				{ card_style.level_7_text.bottom + body_font_vertical() }
		width:				{ saga_text_width() }
		height:				{ if abilities_count() > 7 then textbox_heights()[7] + textbox_move(8) else 0 }
		z index:			900
		alignment:			{ text_alignment() }
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			# scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			# scale down to:		7
		padding top:		{ separator_height()/2 + separator_padding() }
		line height hard:	{ if is_modal(card.level_8_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_8_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	saga text mirror:
		left:				{ hack := card.level_8_text; 375 }
		#left:				{ stylesheet.card_width + 1 }
		top:				{ saga_text_top() + chop_top() }
		width:				{ saga_text_width() }
		height:				{ saga_text_height() - chop_top() - chop_bot() }
		z index:			900
		alignment:			{ text_alignment() }
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
		line height hard:	{ if is_modal(card.saga_text_mirror) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.saga_text_mirror) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	rule text 3:
		left:				76
		top:				838
		width:				{ if is_notched() then 100 else 0 }
		height:				30
		z index:			920
		alignment:			left middle
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				23.5
			color:				{ body_font_color() }
	
	############################# PT
	pt:
		left:				589
		top:				{ 826 + pt_font_vertical() }
		width:				95
		height:				60
		z index:			910
		alignment:			center middle shrink-overflow
		font:
			name:				{ pt_font() }
			size:				{ pt_font_size() }
			color:				{ pt_font_color() }
			separator color:	red
			shadow color:			rgb(0,0,0)
			shadow displacement x:	2
			shadow displacement y:	2

############################################################## Extra card fields
extra card field:
	type:				choice
	name:				transform notch
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				pt box
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				color
	name:				stamp border
	editable:			false
	save value:			false
	script:				rgb(0,0,0)
extra card field:
	type:				choice
	name:				miracle overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				nyx overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				vehicle overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				devoid card mask
	editable:			false
	save value:			false
	choice:				devoid card mask
extra card field:
	type:				choice
	name:				devoid frame
	editable:			false
	save value:			false
	choice:				devoid frame
extra card field:
	type:				choice
	name:				devoid frame 2
	editable:			false
	save value:			false
	choice:				devoid frame 2
extra card field:
	type:				choice
	name:				devoid textbox
	editable:			false
	save value:			false
	choice:				devoid textbox
extra card field:
	type:				choice
	name:				chapter 1
	editable:			false
	save value:			false
	choice:				chapter 1
extra card field:
	type:				choice
	name:				chapter 2
	editable:			false
	save value:			false
	choice:				chapter 2
extra card field:
	type:				choice
	name:				chapter 3
	editable:			false
	save value:			false
	choice:				chapter 3
extra card field:
	type:				choice
	name:				chapter 4
	editable:			false
	save value:			false
	choice:				chapter 4
extra card field:
	type:				choice
	name:				chapter 5
	editable:			false
	save value:			false
	choice:				chapter 5
extra card field:
	type:				choice
	name:				chapter 6
	editable:			false
	save value:			false
	choice:				chapter 6
extra card field:
	type:				choice
	name:				chapter 7
	editable:			false
	save value:			false
	choice:				chapter 7
extra card field:
	type:				choice
	name:				textbox separator 1
	editable:			false
	save value:			false
	choice:				textbox separator 1
extra card field:
	type:				choice
	name:				textbox separator 2
	editable:			false
	save value:			false
	choice:				textbox separator 2
extra card field:
	type:				choice
	name:				textbox separator 3
	editable:			false
	save value:			false
	choice:				textbox separator 3
extra card field:
	type:				choice
	name:				textbox separator 4
	editable:			false
	save value:			false
	choice:				textbox separator 4
extra card field:
	type:				choice
	name:				textbox separator 5
	editable:			false
	save value:			false
	choice:				textbox separator 5
extra card field:
	type:				choice
	name:				textbox separator 6
	editable:			false
	save value:			false
	choice:				textbox separator 6
extra card field:
	type:				choice
	name:				textbox separator 7
	editable:			false
	save value:			false
	choice:				textbox separator 7
extra card style:
	transform notch:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			3
		visible:			{ is_notched() and not is_clear() }
		render style:		image
		image:				{ card_transform() }
	pt box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			19
		visible:			{ card.pt != "" }
		render style:		image
		image:				{ card_ptbox() }
	stamp border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			19
		visible:			{ is_stamped() }
		mask:				masks/stamp_border_mask.png
	nyx overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			5
		visible:			{ is_nyx() }
		render style:		image
		image:				{ if is_crowned() then set_combine(input: "/magic-m15-classicshifted-shared.mse-include/nyx/nyx_crown.png", combine: "add") else set_combine(input: "/magic-m15-classicshifted-shared.mse-include/nyx/nyx.png", combine: "add") }
	vehicle overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			6
		visible:			{ is_vehicle() }
		render style:		image
		image:				/magic-m15-classicshifted-shared.mse-include/vehicle/vehicle.png
	miracle overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			7
		visible:			{ is_miracle() }
		render style:		image
		image:				{ if is_crowned() then set_alpha(set_combine(input: "/magic-m15-classicshifted-shared.mse-include/miracle/miracle_crown.png", combine: "add"), alpha:0.6) else set_alpha(set_combine(input: "/magic-m15-classicshifted-shared.mse-include/miracle/miracle.png", combine: "add"), alpha:0.6) }
	devoid card mask:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			1
		visible:			{ is_clear() }
		render style:		image
		image:				{ image := "clear_masks" + (if is_crowned() then "/devoid_image_mask_crown.png" else "/devoid_image_mask.png"); set_combine(image, combine: "multiply") }
	devoid frame:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			2
		visible:			{ is_clear() }
		render style:		image
		image:				{ image := "clear_masks" + (if is_crowned() then "/devoid_crown" else "/devoid") + (if is_notched() then "_transform.png" else ".png"); set_combine(image, combine: "multiply") }
		mask:				{ "clear_masks" + (if is_crowned() then "/devoid_mask_crown.png" else "/devoid_mask.png") }
	devoid frame 2:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			3
		visible:			{ is_clear() }
		render style:		image
		image:				{ image := "clear_masks" + (if is_crowned() then "/devoid_screen_crown" else "/devoid_screen") + (if is_notched() then "_transform.png" else ".png"); set_alpha(set_combine(image, combine: "screen"), alpha:0.2) }
		mask:				{ "clear_masks" + (if is_crowned() then "/devoid_mask_crown.png" else "/devoid_mask.png") }
	devoid textbox:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			4
		visible:			{ is_clear() }
		render style:		image
		image:				{ set_alpha(set_combine("clear_masks" + "/devoid_screen" + (if is_notched() then "_transform.png" else ".png"), combine: "screen"), alpha:0.75) }
		mask:				{ "clear_masks" + "/devoid_textbox_mask" + (if is_crowned() then "_crown" else "") + (if is_notched() then "_transform.png" else ".png") }
	chapter 1:
		left:				{ chapter_left() }
		top:				{ chapter_top(0) + chapter_move(1) }
		width:				{ chapter_width() }
		height:				{ chapter_height() }
		z index:			810
		render style:		image
		image:				{ chapter_image(1) }
	chapter 2:
		visible:			{ (styling.snap_chapter_to_box == "" and abilities_count() > 1) or length(split_comma(styling.snap_chapter_to_box)) > 1 }
		left:				{ chapter_left() }
		top:				{ chapter_top(1) + chapter_move(2) }
		width:				{ chapter_width() }
		height:				{ chapter_height() }
		z index:			810
		render style:		image
		image:				{ chapter_image(2) }
	chapter 3:
		visible:			{ (styling.snap_chapter_to_box == "" and abilities_count() > 2) or length(split_comma(styling.snap_chapter_to_box)) > 2 }
		left:				{ chapter_left() }
		top:				{ chapter_top(2) + chapter_move(3) }
		width:				{ chapter_width() }
		height:				{ chapter_height() }
		z index:			810
		render style:		image
		image:				{ chapter_image(3) }
	chapter 4:
		visible:			{ (styling.snap_chapter_to_box == "" and abilities_count() > 3) or length(split_comma(styling.snap_chapter_to_box)) > 3 }
		left:				{ chapter_left() }
		top:				{ chapter_top(3) + chapter_move(4) }
		width:				{ chapter_width() }
		height:				{ chapter_height() }
		z index:			810
		render style:		image
		image:				{ chapter_image(4) }
	chapter 5:
		visible:			{ (styling.snap_chapter_to_box == "" and abilities_count() > 4) or length(split_comma(styling.snap_chapter_to_box)) > 4 }
		left:				{ chapter_left() }
		top:				{ chapter_top(4) + chapter_move(5) }
		width:				{ chapter_width() }
		height:				{ chapter_height() }
		z index:			810
		render style:		image
		image:				{ chapter_image(5) }
	chapter 6:
		visible:			{ (styling.snap_chapter_to_box == "" and abilities_count() > 5) or length(split_comma(styling.snap_chapter_to_box)) > 5 }
		left:				{ chapter_left() }
		top:				{ chapter_top(5) + chapter_move(6) }
		width:				{ chapter_width() }
		height:				{ chapter_height() }
		z index:			810
		render style:		image
		image:				{ chapter_image(6) }
	chapter 7:
		visible:			{ (styling.snap_chapter_to_box == "" and abilities_count() > 6) or length(split_comma(styling.snap_chapter_to_box)) > 6 }
		left:				{ chapter_left() }
		top:				{ chapter_top(6) + chapter_move(7) }
		width:				{ chapter_width() }
		height:				{ chapter_height() }
		z index:			810
		render style:		image
		image:				{ chapter_image(7) }
	textbox separator 1:
		left:				{ saga_chapter_text_left() }
		top:				{ hack_to_force_update := card_style.level_1_text.content_width; card_style.level_1_text.top - separator_height()/2 + separator_move(1) }
		width:				{ (separator_left() - saga_chapter_text_left()) + separator_width() }
		height:				{ separator_height() }
		z index:			710
		render style:		image
		image:				/magic-modules.mse-include/separators/flavor bar.png
		#mask:				{ crop_safe("bookmark_mask.png", offset_x: separator_left(), offset_y: card_style.level_2_text.top - separator_height()/2 + separator_move(1), width: separator_width(), height: separator_height()) }
	textbox separator 2:
		left:				{ separator_left() }
		top:				{ hack_to_force_update := card_style.level_2_text.content_width; card_style.level_2_text.top - separator_height()/2 + separator_move(2) }
		width:				{ separator_width() }
		height:				{ separator_height() }
		z index:			710
		visible:			{ abilities_count() > 1 }
		render style:		image
		image:				/magic-modules.mse-include/separators/flavor bar.png
		#mask:				{ crop_safe("bookmark_mask.png", offset_x: separator_left(), offset_y: card_style.level_2_text.top - separator_height()/2 + separator_move(2), width: separator_width(), height: separator_height()) }
	textbox separator 3:
		left:				{ separator_left() }
		top:				{ hack_to_force_update := card_style.level_3_text.content_width; card_style.level_3_text.top - separator_height()/2 + separator_move(3) }
		width:				{ separator_width() }
		height:				{ separator_height() }
		z index:			710
		visible:			{ abilities_count() > 2 }
		render style:		image
		image:				/magic-modules.mse-include/separators/flavor bar.png
		#mask:				{ crop_safe("bookmark_mask.png", offset_x: separator_left(), offset_y: card_style.level_3_text.top - separator_height()/2 + separator_move(3), width: separator_width(), height: separator_height()) }
	textbox separator 4:
		left:				{ separator_left() }
		top:				{ hack_to_force_update := card_style.level_4_text.content_width; card_style.level_4_text.top - separator_height()/2 + separator_move(4) }
		width:				{ separator_width() }
		height:				{ separator_height() }
		z index:			710
		visible:			{ abilities_count() > 3 }
		render style:		image
		image:				/magic-modules.mse-include/separators/flavor bar.png
		#mask:				{ crop_safe("bookmark_mask.png", offset_x: separator_left(), offset_y: card_style.level_4_text.top - separator_height()/2 + separator_move(4), width: separator_width(), height: separator_height()) }
	textbox separator 5:
		left:				{ separator_left() }
		top:				{ hack_to_force_update := card_style.level_5_text.content_width; card_style.level_5_text.top - separator_height()/2 + separator_move(5) }
		width:				{ separator_width() }
		height:				{ separator_height() }
		z index:			710
		visible:			{ abilities_count() > 4 }
		render style:		image
		image:				/magic-modules.mse-include/separators/flavor bar.png
		#mask:				{ crop_safe("bookmark_mask.png", offset_x: separator_left(), offset_y: card_style.level_5_text.top - separator_height()/2 + separator_move(5), width: separator_width(), height: separator_height()) }
	textbox separator 6:
		left:				{ separator_left() }
		top:				{ hack_to_force_update := card_style.level_6_text.content_width; card_style.level_6_text.top - separator_height()/2 + separator_move(6) }
		width:				{ separator_width() }
		height:				{ separator_height() }
		z index:			710
		visible:			{ abilities_count() > 5 }
		render style:		image
		image:				/magic-modules.mse-include/separators/flavor bar.png
		#mask:				{ crop_safe("bookmark_mask.png", offset_x: separator_left(), offset_y: card_style.level_6_text.top - separator_height()/2 + separator_move(6), width: separator_width(), height: separator_height()) }
	textbox separator 7:
		left:				{ separator_left() }
		top:				{ hack_to_force_update := card_style.level_7_text.content_width; card_style.level_7_text.top - separator_height()/2 + separator_move(7) }
		width:				{ separator_width() }
		height:				{ separator_height() }
		z index:			710
		visible:			{ abilities_count() > 6 }
		render style:		image
		image:				/magic-modules.mse-include/separators/flavor bar.png
		#mask:				{ crop_safe("bookmark_mask.png", offset_x: separator_left(), offset_y: card_style.level_7_text.top - separator_height()/2 + separator_move(7), width: separator_width(), height: separator_height()) }
